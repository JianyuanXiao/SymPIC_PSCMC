(begin 
    (define lstpdargs '((Field3D_MPI_DOUBLE* E) (Field3D_MPI_DOUBLE* B)(Field3D_Seq_DOUBLE* FoutJ) (Field3D_MPI_DOUBLE* VoutJ) (NUMBER_REAL Qe) (NUMBER_REAL Mass) (NUMBER_REAL Deltat))) 
    (define sstpdargs (map cadr lstpdargs))
    (define (genr0r1r2 prefix withtype)
      (define TP_FLOATp 'PARTICLE_NUMBER_REAL*)
      (define TP_INTp 'int* )
      (define TP_INT 'int )
      (define TP_CUp 'compute_unit_particles*)
      (define baseopt  '(r0 r1 size4 extra_inform extra_inform_len stat load len cup))
      (define basetype (list TP_FLOATp TP_FLOATp 'sizeint4* TP_FLOATp TP_INT TP_INTp TP_INTp TP_INT TP_CUp))
      (if withtype
	(map (lambda (x y) (list y (if (null? prefix) x (concat prefix x)))) baseopt basetype)
	(map (lambda (x y) (if (null? prefix ) x (concat prefix x))) baseopt basetype)
	)
      )
    '())
(defmacro paraids (idx idy idz xyz bdata)
  `(+ ,xyz (* 3 (+ ,idx (* ,bdata (+ ,idy (* ,idz ,bdata))))))
  )
(defmacro paraids_blk (idx idy idz xyz)
  `(+ ,xyz (* 3 (+ ,idx (* blk_len_x (+ ,idy (* ,idz blk_len_y))))))
  )
(defmacro constant-for-from-to (var from to . expr)
  (cons 'begin
  (let loop ((vartmp from))
    (if (= vartmp to) '()
      (cons (cons 'begin (replace-all expr var vartmp)) (loop (+ vartmp 1)))
      )
    ))
  )

