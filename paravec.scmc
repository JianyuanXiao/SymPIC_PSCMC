(eval-scmc-global (begin (load "pscmc_config_runtime.ss") '()))
;(scmc-define-global (get))

(ifndefmacro NCSPIC_SEQ_FIELD
  (begin
    (input-scmc "smallmpi/small_mpi_inc.scmc")
    (include- "libsmallmpi.h")
    (pure-text "\n#define NCSPIC_SEQ_FIELD\n")
    (pure-text "typedef double NUMBER_REAL;\n")
    (pure-text "typedef enum {CD_C,CD_OpenMP,CD_OpenCL,CD_CUDA,CD_COI,CD_HIP,CD_SYCL} SEQ_FIELD_TYPES;\n")
    (pure-text "\n#define NUM_SYNC_LAYER 27\n")
    (pure-text "\n#define NUM_SYNC_KERNEL 12\n")
    (pure-text "\n#define NUM_FDTD_KERNEL 22\n")
    ;(pure-text "\n#define NUM_BLAS_KERNEL 3\n")
    (eval-scmc-global 
      (begin
	(define blas-kernels (append '(blas_yiszero_synced blas_mulxy_numele3) (apply append (map (lambda (x) (list x (concat x '_full_block))) `(blas_yiszero blas_yisconst blas_get_ITG_Potential blas_invy blas_axpby blas_axpy blas_yisax blas_mulxy blas_findmax blas_dot blas_sum))) '(blas_yisax_shrink blas_yisax_enlarge blas_axpy_shrink blas_axpy_enlarge blas_axpby_shrink blas_axpby_enlarge)))
	`(class-typedef-struct Field3D_Seq
	   (void* pe) ;para_environment
	   (long xlen)
	   (long ylen)
	   (long zlen)
	   (long xblock)
	   (long yblock)
	   (long zblock)
	   (long numvec)
	   (long x_num_thread_block)
	   (long y_num_thread_block)
	   (long z_num_thread_block)
	   (int ovlp)
	   (int num_ele)
	   (int CD_type) ;CD_type can be CD_C/CD_OpenMP/CD_OpenCL/CD_CUDA/CD_SWMC...
	   ;(dec-array NUMBER_REAL* sync_layer NUM_SYNC_LAYER)
	   (dec-array void* sync_layer_pscmc NUM_SYNC_LAYER)
	   (dec-array void* swap_layer_pscmc NUM_SYNC_LAYER)
	   (dec-array void* sync_kernels NUM_SYNC_KERNEL)
	   (dec-array void* fdtd_kernels NUM_FDTD_KERNEL)
	   (dec-array void* dm_kernels 3)
	   (dec-array void* dmbihamt_kernels 7)
	   (dec-array void* dm8x8_kernels 4)
	   (dec-array void* geo_yeefdtd_kernels 2)
	   (dec-array void* geo_yeefdtd_rect_kernels 1)
	   (dec-array void* yeefdtd_stencil_kernels 3)
	   (dec-array void* hydroA_kernels 8)
	   ;(dec-array void* mur_abc_kernels 8)
	   (dec-array void* yee_abc_kernels 8)
	   (dec-array void* yee_pec_kernels 8)
	   (dec-array void* yee_damp_kernels 8)
	   (dec-array void* yee_setfix_kernels 8)
	   (void* rdcd)
	   (double* rdcd_host)
	   (void* cur_rankx_pscmc)
	   (void* cur_ranky_pscmc)
	   (void* cur_rankz_pscmc)
	   (void* xoffset)
	   (void* yoffset)
	   (void* zoffset)
	   (long* global_x_offset)
	   (long* global_y_offset)
	   (long* global_z_offset)
	   (long* global_id) ;this is the real __idx+xlen*(__idy+ylen*idz)
	   (long global_pid)
	   (long* adj_ids)
	   (long* adj_processes)
	   (long* adj_local_tid)
	   (void* main_data)
	   (double delta_x)
	   (double delta_y)
	   (double delta_z)
	   .
	   ,(map 
	     (lambda (name) `(void* ,(concat name '_kernel)))
	     blas-kernels
	     )
	   ;(PS_MPI_Comm comm)
	   ;(NUMBER_REAL * data)
	   ;(NUMBER_REAL size_extention)
	   )

	))
(define-scmc-global PARTICLE_LEN 6)
(eval-scmc-global 
  (begin
    (define quick_variables 
      ;name type len
      `( (inoutput double (* ,PARTICLE_LEN grid_cache_len xlen ylen zlen numvec))
	 (xyzw int (* 4 xlen ylen zlen numvec))
	 (cu_cache double (* ,PARTICLE_LEN cu_cache_length numvec))
	 (cu_xyzw int (* numvec 4))
	 (adjoint_vec_pids long (* numvec 6)) ;-1 if not in this compute unit
	 )
      )
    (define str_quick_vars 
      (map (lambda (qv) (list 'void* (car qv))) quick_variables)
      )
    (define particle_kernel_vars
      `(
	 split_pass_x 
	 split_pass_y 
	 split_pass_z 
	 split_pass_x_nopush
	 split_pass_y_nopush
	 split_pass_z_nopush
	 split_pass_x_small_grids
	 split_pass_y_small_grids
	 split_pass_z_small_grids
	 split_pass_x_sg2_small_grids
	 split_pass_y_sg2_small_grids
	 split_pass_z_sg2_small_grids
	 split_pass_E_particle
	 split_pass_x_vlo
	 split_pass_y_vlo
	 split_pass_z_vlo
	 split_pass_x_vlo_nopush
	 split_pass_y_vlo_nopush
	 split_pass_z_vlo_nopush
	 split_pass_x_vlo_small_grids
	 split_pass_y_vlo_small_grids
	 split_pass_z_vlo_small_grids
	 split_pass_x_vlo_sg2_small_grids
	 split_pass_y_vlo_sg2_small_grids
	 split_pass_z_vlo_sg2_small_grids
	 split_pass_x_vlo_sg2_nopush_small_grids
	 split_pass_y_vlo_sg2_nopush_small_grids
	 split_pass_z_vlo_sg2_nopush_small_grids
	 split_pass_E_particle_vlo
	 dump_ene_num
	 calculate_rho
	 )
      )
    `(class-typedef-struct One_Particle_Collection
       (Field3D_Seq* pfield)
       (Field3D_Seq* pfieldE)
       (Field3D_Seq* pfieldB)
       (Field3D_Seq* pfieldB1)
       (Field3D_Seq* pFoutJ)
       (Field3D_Seq* pLFoutJ)
       (Field3D_Seq* pFoutEN)
       (dec-array void* sort_kernel 24)
       (dec-array void* geo_rel_1st_kernel 9)
       (dec-array void* implicit_kernel 2)
       (dec-array void* rel_1st_kernel 2)
       (dec-array void* krook_collision_test_kernel 2)
       (dec-array void* nonrel_test_kernel 28)
       (dec-array void* geo_rel_slab_nr_2nd_kernel 12)
       ;(dec-array void* krook_collision_remove_small_speed 1)
       (dec-array void* boris_yee_kernel 1)
       (void* cu_swap_l_6_kernel)
       (void* cu_swap_r_6_kernel)
       (void* move_back_kernel_6_kernel)
       (void* cu_swap_l_8_kernel)
       (void* cu_swap_r_8_kernel)
       (void* move_back_kernel_8_kernel)
       (double Mass )
       (double Charge )
       (double Number_particle_per_marker)
       (long grid_cache_len)
       (long cu_cache_length)
       . ,(append 
	    (map (lambda (x) `(void* ,(concat x '_kernel))) particle_kernel_vars)
	    str_quick_vars)
       )))
;(class-typedef-struct Field3D_Multi)
(typedef-struct Field3D_Seq_PAIR
  (Field3D_Seq* car)
  (void* cdr)
  )
(class-typedef-struct Field3D_MPI
  (Field3D_Seq* data)
  (long num_runtime)
  (PS_MPI_Comm comm)
  (long cur_rank)
  (long num_mpi_process)
  ;(long* proc_mpiproc_map)
  (dec-array long sync_layer_len NUM_SYNC_LAYER)
  (PS_MPI_Request** rqst)
  (One_Particle_Collection* particles)
  (int num_spec)
  (double damp_vars)
  )
(class-typedef-struct Particle_in_Cell_MPI
  (Field3D_MPI MPI_fieldE)
  (Field3D_MPI MPI_fieldB)
  (Field3D_MPI MPI_fieldB1)
  (Field3D_MPI MPI_FoutJ)
  (Field3D_MPI MPI_FoutJtmp)
  (Field3D_MPI MPI_LFoutJ)
  (Field3D_MPI MPI_fieldEtmp)
  (Field3D_MPI MPI_fieldBtmp)
  (Field3D_MPI MPI_fieldEtmp1)
  (Field3D_MPI MPI_fieldEtmp2)
  (Field3D_MPI MPI_fieldE1)
  (Field3D_MPI MPI_fieldBtmp1)
  (Field3D_MPI MPI_fieldPMLB)
  (Field3D_MPI MPI_fieldPMLE)
  (Field3D_MPI* pMPI_FoutJ)
  (Field3D_MPI* pMPI_FoutEN)
  (Field3D_MPI MPI_fieldE_ext)
  (Field3D_MPI MPI_fieldB_ext)
  (Field3D_MPI MPI_fieldE_filter)
  (Field3D_MPI MPI_fieldB_filter)
  (Field3D_MPI* pB0)
  (Field3D_MPI* pB1)
  (Field3D_MPI MPI_fieldE01_2x)
  (Field3D_MPI MPI_fieldB0_2x)
  (int use_pml_abc_dir)
  (int use_pml_level)
  (int use_small_grid)
  (int use_rel_ncr)
  (int use_vlo)
  (long allxmax)
  (long allymax)
  (long allzmax)
  (double use_pml_sigma_max)

  (double dt)
  (double tori_x0)
  (double solve_err)

  (int o_N_l)
  (int o_N_M)
  (double* o_pmass)
  (double* o_pcharge)
  (int* o_particle_type)
  (int current_mask)
  (int use_tori)
  (void* pusher_fun)
  )
(pure-text "\n")
(ifndefmacro LINEAR_OPERATOR_PICUS_001
  (begin
    (pure-text "\n#define LINEAR_OPERATOR_PICUS_001 \n typedef ")
    (declare (function-pointer int Field3D_MPI* Field3D_MPI* void* ) linear_operator_mpi)
    )
  ()
  )
(class-typedef-struct bicg_space
  (Field3D_MPI* r1)
  (Field3D_MPI* ti)
  (Field3D_MPI* si1)
  (Field3D_MPI* si)
  (Field3D_MPI* vi1)
  (Field3D_MPI* pi)
  (Field3D_MPI* pi1)
  (Field3D_MPI* ri1)
  (Field3D_MPI* ri)
  (Field3D_MPI* r0h)
  (linear_operator_mpi A)
  (void* fv)
  (int zmax)
  (double solve_err)
  )
(class-typedef-struct jfnk_newton_space 
  (bicg_space bs)
  (linear_operator_mpi oscc)
  (Field3D_MPI* x0)
  (Field3D_MPI* oscc_x0)
  (Field3D_MPI* res_tmp)
  (void* fv)
  (dec-array void* p_vfv 5)
  (int newton_zmax)
  (int zmax)
  (double solve_err)
  (double newton_solve_err)
  (double epsl)
  )
)
  ())
(defmacro GET_FIELD3D_SEQ (fp idvec ix iy iz l)
  `(vector-ref 
     (vector-ref (type-convert double** (structp-ref ,fp main_data)) 0) 
     (+
       (* ,idvec (structp-ref ,fp xblock) 
	 (structp-ref ,fp yblock)
	 (structp-ref ,fp zblock)
	 (structp-ref ,fp num_ele)) 
       (GET_IDXYZL 
	 (+ ,ix (structp-ref ,fp ovlp))
	 (+ ,iy (structp-ref ,fp ovlp))
	 (+ ,iz (structp-ref ,fp ovlp))
	 ,l
	 (structp-ref ,fp num_ele)
	 (structp-ref ,fp xblock)
	 (structp-ref ,fp yblock)
	 (structp-ref ,fp zblock)
	 )))
  )
(defmacro GET_MPI_PROC_NUM_BY_PID (mpifieldp pid)
  `(/ ,pid (structp-ref ,mpifieldp num_runtime))
  )
(define-scmc-global init-single-kernel 
  (lambda (name)
    (define strname (multi-concat name '_struct))
    (define kname (multi-concat name '_kernel))
    `(begin
       (set! (structp-ref pthis ,kname) (malloc ,(choose_the_runtime_procedure strname `(sizeof ,strname))))
       (choose_the_runtime (,(multi-concat name '_init) pe (structp-ref pthis ,kname)))
       )
    ))
(define-scmc-global init-multi-kernel
  (lambda (names kname) 
    `(begin 
       .
       ,(let loop ((names names) (n 0))
	  (cond
	    ((null? names) '())
	    (else
	      (define name (car names))
	      (define strname (multi-concat name '_struct))
	      `(begin
		 (set! (vector-ref (structp-ref pthis ,kname) ,n) (malloc ,(choose_the_runtime_procedure strname `(sizeof ,strname))))
		 (choose_the_runtime (,(multi-concat name '_init) pe (vector-ref (structp-ref pthis ,kname) ,n)))
		 )
	      )
	    )
	  )))
  )
