;paravec.scmc general_macros.scmc

(eval-scmc-global (begin (load "pscmc_config_runtime.ss") '()))
(include< "stdio.h")
(include< "stdlib.h")
(include< "string.h")
(include< "assert.h")
;(include- "c_/c_pscmc_inc.h")
(input-scmc "paravec.scmc")
(input-scmc "general_macros.scmc")
(input-all-pscmc-struct)
(input-all-kernel-and-rt)
(include< "cgapsio.h")

(include- "space_filling_curve.h")
(include- "mpifields.h")
(include- "blas_shell.h")
(include- "init_field3d_mpi.h")
(include- "mpi_fieldio.h")
(include- "call_curl_kernel.h")
(include- "sync_fields.h")
(include- "init_implicit_particle.h")
(include- "run_particle.h")
(include- "run_particle_call_fun.h")
(define-scmc-global dynamic_chosen_func '(slab_nr_Bfield_pushJ slab_nr_Bfield_pushJ_vlo geo_nr_Bfield_pushJ geo_rel_1st_fwd slab_midp_nr_Bfield_pushJ slab_midp_nr_Bfield_pushJ_vlo geo_nr_Bfield_pushJ_vlo implicit_2nd_tori_rel implicit_2nd_tori_nr implicit_2nd_slab_rel implicit_2nd_slab_nr))
(eval-scmc-global
  (begin
    (define (isimp funname)
      (define ls1 (string->list (symbol->string funname)))
      (and (eq? (car ls1) #\i) (eq? (cadr ls1) #\m) (eq? (caddr ls1) #\p))
      )
    `(defun-class-Particle_in_Cell_MPI MPI_choose_pusher_mask int ((Field3D_MPI* fieldE) (Field3D_MPI* fieldB) (Field3D_MPI* fieldB1) (Field3D_MPI* FoutJ) (double* pmass) (double* pchg) (double deltat) (double tx0) (double slove_err) (int mask))
       ;(define-int* particle_type pthis->o_particle_type)
       (declare-static-void** (function_pointers NULL) (function_pointers_nopush_par NULL) (function_pointers_nopushJ NULL))
       (if (eq? function_pointers NULL)
	 (begin
	   (set! function_pointers (malloc (* (sizeof void* ) ,(length dynamic_chosen_func))))
	   (set! function_pointers_nopush_par (malloc (* (sizeof void* ) ,(length dynamic_chosen_func))))
	   (set! function_pointers_nopushJ (malloc (* (sizeof void* ) ,(length dynamic_chosen_func))))
	   (begin .
	     ,(let loop ((n 0) (dynamic_chosen_func dynamic_chosen_func))
		(cond
		  ((null? dynamic_chosen_func) '())
		  (else 
		    (define funname (car dynamic_chosen_func))
		    (cons 
		      `(begin 
			 (set! (vector-ref function_pointers ,n) ,(multi-concat 'One_Particle_Collection_ funname))
			 (set! (vector-ref function_pointers_nopush_par ,n) ,(multi-concat 'One_Particle_Collection_ funname (if (isimp funname) '_midp_nopush_par "")))
			 (set! (vector-ref function_pointers_nopushJ ,n) ,(multi-concat 'One_Particle_Collection_ funname (if (isimp funname) '_midp_nopushJ "")))
			 ) (loop (+ n 1) (cdr dynamic_chosen_func))))
		  )
		))
	   )
	 )
       (define-int num_spec (struct-ref MPI_fieldE num_spec))
       (define-int num_runtime (struct-ref MPI_fieldE num_runtime))


       ;(LOG_RECORD_INFO "OK here\n")
       (inner-for-from-to i 0 (* num_runtime num_spec) 
	 (define-int cur_spec (/ i num_runtime))
	 (define-int particle_type (vector-ref o_particle_type cur_spec))
	 (if (b-and (vector-ref o_particle_type cur_spec) mask)
	   (begin
	     (define-int use_implicit (b-and particle_type 16))
	     (define-int use_nopush_par (b-and mask 32))
	     (define-int use_nopushJ (b-and mask 64))
	     (define-int func_num (/ particle_type 1024))
	     (define-int nmrt (remainder i num_runtime))
	     (if use_implicit
	       (begin
		 (declare (function-pointer int void* void* void* void* void* double double double double double int int ) (func (vector-ref function_pointers func_num)))
		 (if use_nopush_par (set! func (vector-ref function_pointers_nopush_par func_num)))
		 (if use_nopushJ    (set! func (vector-ref function_pointers_nopushJ    func_num)))
		 (func (+ MPI_fieldE.particles i) (+ fieldE->data nmrt) (+ fieldB->data nmrt) (+ fieldB1->data nmrt) (+ FoutJ->data nmrt) (vector-ref pmass cur_spec) (vector-ref pchg cur_spec) deltat tx0 solve_err cur_spec num_spec)
		 )
	       (begin
		 (declare (function-pointer int void* void* void* void* void* double double double double double double double double double int int ) (func (vector-ref function_pointers func_num)))
		 (func (+ MPI_fieldE.particles i) (+ fieldE->data nmrt) (+ fieldB->data nmrt) (+ fieldB1->data nmrt) (+ FoutJ->data nmrt) (vector-ref pmass cur_spec) (vector-ref pchg cur_spec) deltat tx0 0 0 0 0 0 cur_spec num_spec)
		 )
	       )
	     )
	   )
	 )
       ))
  )
(defun set_pusher_torix0_solveerr_and_mask int ((Particle_in_Cell_MPI* fv) (void* puser_fun) (double tori_x0) (double solve_err) (int mask) (int use_tori))
  (set! fv->pusher_fun puser_fun)
  (set! fv->current_mask mask)
  (set! fv->tori_x0 tori_x0)
  (set! fv->solve_err solve_err)
  (set! fv->use_tori use_tori)
  (return 0)
  )
(defun-class-Field3D_MPI nonlin_fun_shell_for_mask int ((Field3D_MPI* x) (Particle_in_Cell_MPI* fv))
  (class-header-Particle_in_Cell_MPI fv)
  ;input: B is B01, E is E0, x is E1
  ;B1 should be B12, pthis should be DT (curl^T(B01+B12)/2 - Je - Ji - (E1 - E0)/DT), Etmp1 is E1
  (define-Field3D_MPI* pMPI_fieldE ("&" MPI_fieldE))
  (define-Field3D_MPI* pMPI_fieldEtmp1 ("&" MPI_fieldEtmp1))
  (define-Field3D_MPI* pMPI_FoutJtmp ("&" MPI_FoutJtmp))
  (define-Field3D_MPI* pMPI_fieldB ("&" MPI_fieldB))
  (define-Field3D_MPI* pMPI_fieldB1 ("&" MPI_fieldB1))

  (sync_ovlp_mpi_field pMPI_fieldE)
  (blas_yisax_Field3D_MPI pMPI_fieldEtmp1 pMPI_fieldEtmp1 0.5 pMPI_fieldE)
  (blas_axpy_Field3D_MPI pMPI_fieldEtmp1 pMPI_fieldEtmp1 0.5 x)
  (sync_ovlp_mpi_field pMPI_fieldEtmp1)
  (blas_yisax_Field3D_MPI pMPI_fieldB1 pMPI_fieldB1 1 pMPI_fieldB)

  (MPI_Yee_FDTD_Curl_E pMPI_fieldB1 pMPI_fieldEtmp1 dt)
  (sync_ovlp_mpi_field pMPI_fieldB)
  (sync_ovlp_mpi_field pMPI_fieldB1)
  (blas_yiszero_synced_Field3D_MPI pMPI_FoutJtmp pMPI_FoutJtmp)
  (declare (function-pointer int Particle_in_Cell_MPI* Field3D_MPI* Field3D_MPI* Field3D_MPI* Field3D_MPI* double* double* double double double int) (e_pusher_fun_mask fv->pusher_fun))
  (e_pusher_fun_mask fv pMPI_fieldEtmp1 pMPI_fieldB pMPI_fieldB1 pMPI_FoutJtmp o_pmass o_pcharge dt tori_x0 solve_err current_mask)
  (merge_ovlp_mpi_field pMPI_FoutJtmp)
  (blas_axpy_Field3D_MPI pMPI_FoutJtmp pMPI_FoutJtmp 1 pMPI_FoutJ)
  ;CURL_L
  (blas_yisax_Field3D_MPI pthis pthis -1 pMPI_FoutJtmp)
  (blas_axpy_Field3D_MPI pthis pthis 1 pMPI_fieldE)
  (blas_axpy_Field3D_MPI pthis pthis -1 x)
  (block
    (class-header-Field3D_Seq MPI_fieldE.data)
    (if use_tori
      (begin
	(MPI_GEO_YEE_CURL_L pthis pMPI_fieldB1 tori_x0 delta_x delta_y delta_z (* dt 0.5))
	(MPI_GEO_YEE_CURL_L pthis pMPI_fieldB  tori_x0 delta_x delta_y delta_z (* dt 0.5))
	)
      (begin
	(MPI_RECT_YEE_CURL_L pthis pMPI_fieldB1 delta_z delta_y delta_x (* dt 0.5))
	(MPI_RECT_YEE_CURL_L pthis pMPI_fieldB delta_z delta_y delta_x (* dt 0.5))
	)
      ))
  (return 0)
  )

(defun-class-Field3D_MPI nonlin_fun_midp_vlasov_maxwell int ((Field3D_MPI* x) (Particle_in_Cell_MPI* fv))
  ;here pthis is DT (curl^T (B0+B1) - J), x is E1;
  (class-header-Particle_in_Cell_MPI fv)
  (define-double DeltaT_i (* dt o_N_l))
  ;(LOG_RECORD_INFO "dt=%e\n" DeltaT_i)
  (define-Field3D_MPI* pMPI_fieldE ("&" MPI_fieldE))
  (define-Field3D_MPI* pMPI_fieldB ("&" MPI_fieldB))
  (define-Field3D_MPI* pMPI_fieldB1 ("&" MPI_fieldB1))
  (sync_ovlp_mpi_field pMPI_fieldE)
  (sync_ovlp_mpi_field x)
  (blas_yisax_Field3D_MPI pMPI_fieldB1 pMPI_fieldB1 1 pMPI_fieldB)
  (MPI_Yee_FDTD_Curl_E pMPI_fieldB1 x (* DeltaT_i 0.5))
  (MPI_Yee_FDTD_Curl_E pMPI_fieldB1 pMPI_fieldE (* DeltaT_i 0.5))
  (sync_ovlp_mpi_field pMPI_fieldB)
  (sync_ovlp_mpi_field pMPI_fieldB1)
  ;(blas_axpy_Field3D_MPI x x -1.0 ("&" MPI_fieldE))
  (blas_yiszero_synced_Field3D_MPI ("&" MPI_FoutJ) ("&" MPI_FoutJ))
  (if use_vlo 
    (MPI_slab_midp_nr_Bfield_pushJ_nopush_par_vlo fv pMPI_fieldE x pMPI_fieldB pMPI_fieldB1 pMPI_FoutJ o_pmass o_pcharge DeltaT_i 1 0 0 0 0 0)
    (MPI_slab_midp_nr_Bfield_pushJ_nopush_par fv pMPI_fieldE x pMPI_fieldB pMPI_fieldB1 pMPI_FoutJ o_pmass o_pcharge DeltaT_i 1 0 0 0 0 0)
    )
  (merge_ovlp_mpi_field ("&" MPI_FoutJ))
  (blas_yiszero_synced_Field3D_MPI pthis pthis)
  (block
    (class-header-Field3D_Seq MPI_fieldE.data)
    (MPI_RECT_YEE_CURL_L pthis pMPI_fieldB delta_z delta_y delta_x (* 0.5 DeltaT_i))
    (MPI_RECT_YEE_CURL_L pthis pMPI_fieldB1 delta_z delta_y delta_x (* 0.5 DeltaT_i))
    )
  (blas_axpy_Field3D_MPI pthis pthis -1 ("&" MPI_FoutJ))
  (blas_axpy_Field3D_MPI pthis pthis 1 pMPI_fieldE)
  (blas_axpy_Field3D_MPI pthis pthis -1 x)
  (return 0)
  )

(defun-class-Field3D_MPI nonlin_fun_cur_min_curlB int ((Field3D_MPI* x) (Particle_in_Cell_MPI* fv))
  ;here pthis is DT (curl^T B - J), x is E;
  (class-header-Particle_in_Cell_MPI fv)
  (define-double DeltaT_i (* dt o_N_l))
  (blas_yisax_Field3D_MPI ("&" MPI_fieldB1) ("&" MPI_fieldB1) 1 ("&" MPI_fieldB))
  (MPI_Yee_FDTD_Curl_E ("&" MPI_fieldB1) x DeltaT_i)
  (blas_yisax_Field3D_MPI ("&" MPI_fieldE) ("&" MPI_fieldE) 1 x)
  (sync_ovlp_mpi_field ("&" MPI_fieldE))
  (sync_ovlp_mpi_field ("&" MPI_fieldB))
  (sync_ovlp_mpi_field ("&" MPI_fieldB1))
  (define-Field3D_MPI* pMPI_fieldE ("&" MPI_fieldE))
  (define-Field3D_MPI* pMPI_fieldB ("&" MPI_fieldB))
  (define-Field3D_MPI* pMPI_fieldB1 ("&" MPI_fieldB1))

  (blas_yiszero_synced_Field3D_MPI ("&" MPI_FoutJ) ("&" MPI_FoutJ))
  (MPI_slab_nr_Bfield_pushJ_nopush_par fv pMPI_fieldE pMPI_fieldB pMPI_fieldB1 pMPI_FoutJ o_pmass o_pcharge (* 0.5 DeltaT_i) 1 0 0 0 0 0)
  (merge_ovlp_mpi_field ("&" MPI_FoutJ))
  (blas_yiszero_synced_Field3D_MPI pthis pthis)
  (block
    (class-header-Field3D_Seq MPI_fieldE.data)
    (MPI_RECT_YEE_CURL_L pthis pMPI_fieldB delta_z delta_y delta_x DeltaT_i)
    )
  (blas_axpy_Field3D_MPI pthis pthis -1 ("&" MPI_FoutJ))
  (if 0
    (block
      (decl-var-and-pvar Gaps_IO_DataFile gid)
      (merge_ovlp_mpi_field ("&" MPI_FoutJ))
      (init_parallel_file_for_mpi_fields ("&" MPI_fieldB) pgid "tmpJ1" -1 0 0)
      (mpi_field_write_to_file ("&" MPI_FoutJ) pgid 0)
      (mpi_field_write_to_file ("&" MPI_fieldB) pgid 1)
      (mpi_field_write_to_file ("&" MPI_fieldE) pgid 2)
      (LOG_RECORD_INFO "otpt J2\n")
      (exit 0)
      )
    )
  (return 0)
  )

(defun-class-Field3D_MPI one_step_calc_current int ((Field3D_MPI* x) (Particle_in_Cell_MPI* fv))
  ;here pthis is J, x is E;
  (class-header-Particle_in_Cell_MPI fv)
  (define-double DeltaT_i (* dt o_N_l))
  (blas_yisax_Field3D_MPI ("&" MPI_fieldB) ("&" MPI_fieldB) 1 ("&" MPI_fieldBtmp1))
  (MPI_Yee_FDTD_Curl_E ("&" MPI_fieldB) x DeltaT_i)
  (blas_yisax_Field3D_MPI ("&" MPI_fieldE) ("&" MPI_fieldE) 1 x)

  (sync_ovlp_mpi_field ("&" MPI_fieldE))
  (sync_ovlp_mpi_field ("&" MPI_fieldB))
  (blas_yiszero_synced_Field3D_MPI ("&" MPI_FoutJ) ("&" MPI_FoutJ))
  (MPI_split_pass_xyzE_particle fv ("&" MPI_fieldE) ("&" MPI_fieldB) ("&" MPI_FoutJ) o_pmass o_pcharge dt o_N_l o_N_M 1)
  (if 0
    (block
      (decl-var-and-pvar Gaps_IO_DataFile gid)
      (merge_ovlp_mpi_field ("&" MPI_FoutJ))
      (init_parallel_file_for_mpi_fields ("&" MPI_fieldB) pgid "tmpJ1" -1 0 0)
      (mpi_field_write_to_file ("&" MPI_FoutJ) pgid 0)
      (mpi_field_write_to_file ("&" MPI_fieldB) pgid 1)
      (mpi_field_write_to_file ("&" MPI_fieldE) pgid 2)
      (LOG_RECORD_INFO "otpt J2\n")
      (exit 0)
      ))
  ;normal split passes
  (block
    (define-double dt0 (* dt o_N_l 0.5))
    (define-int usevlo 0)
    (if usevlo 
      (split_pass_E_particle_vlo_mpi fv (* dt0 2)) 
      (split_pass_E_particle_mpi fv (* dt0 2)))
    
    (split_pass_x_nopush_mpi_multi_runtime fv dt0 )
    (split_pass_y_nopush_mpi_multi_runtime fv dt0 )
    (split_pass_z_nopush_mpi_multi_runtime fv (* dt0 2) )
    (split_pass_y_nopush_mpi_multi_runtime fv dt0 )
    (split_pass_x_nopush_mpi_multi_runtime fv dt0 )
    )
  ;(split_2nd_all_passes)
  (merge_ovlp_mpi_field ("&" MPI_FoutJ))
  (blas_yisax_Field3D_MPI pthis pthis 1 ("&" MPI_FoutJ))
  (block
    (class-header-Field3D_Seq MPI_fieldE.data)
    (MPI_RECT_YEE_CURL_L pthis ("&" MPI_fieldB) delta_z delta_y delta_x -1)
    )
  (return 0)
  )
(define-double jac_pred_rat 1e4)
(defun-class-Field3D_MPI Jacobi_x int ((Field3D_MPI* dx) (Particle_in_Cell_MPI** fv))
  ;fv[0] is epsl (a double); fv[1] is ppis; fv[2] is x; fv[3] is oscc;fv[4] is oscc(x)
  (define-double* epsl (vector-ref fv 0))
  (define-Particle_in_Cell_MPI* ppis (vector-ref fv 1))
  (define-Field3D_MPI* x (vector-ref fv 2))
  (define-linear_operator_mpi oscc (vector-ref fv 3))
  (define-Field3D_MPI* oscc_x (vector-ref fv 4))
  (if 0 
    (block
      ;(blas_axpy_Field3D_MPI dx dx 0.5 oscc_x)
      (blas_yisax_Field3D_MPI dx dx 0.5 dx)
      )
    )
  ;(exit 0)
  ;(oscc pthis x ppis)
  (blas_yisax_Field3D_MPI ("&" ppis->MPI_fieldEtmp) ("&" ppis->MPI_fieldEtmp) (* jac_pred_rat (vrf epsl 0)) dx)
  (blas_axpy_Field3D_MPI ("&" ppis->MPI_fieldEtmp) ("&" ppis->MPI_fieldEtmp) 1 x)
  (oscc pthis ("&" ppis->MPI_fieldEtmp) ppis)
  (if 0
    (begin
      (decl-var-and-pvar Gaps_IO_DataFile gid)
      (init_parallel_file_for_mpi_fields ("&" ppis->MPI_fieldEtmp) pgid "tmpJ1" -1 0 0)
      (mpi_field_write_to_file pthis pgid 0)
      (mpi_field_write_to_file dx pgid 1)
      (mpi_field_write_to_file x pgid 2)
      (mpi_field_write_to_file oscc_x pgid 3)
      (mpi_field_write_to_file ("&" ppis->MPI_fieldEtmp) pgid 4)
      (LOG_RECORD_INFO "otpt J2\n")
      (exit 0)
      )
    )
  (blas_axpy_Field3D_MPI pthis pthis -1 oscc_x)
  (blas_yisax_Field3D_MPI pthis pthis (/ 1 (vrf epsl 0)) pthis)
  (if 0
    (block
      (define-static-int s 0)
      (if (neq? s 2) (incf! s) 
	(begin
	  (decl-var-and-pvar Gaps_IO_DataFile gid)
	  (LOG_RECORD_INFO "epsl=%e\n" (vrf epsl 0))
	  (init_parallel_file_for_mpi_fields ("&" ppis->MPI_fieldEtmp) pgid "tmpJ1" -1 0 0)
	  (mpi_field_write_to_file pthis pgid 0)
	  (mpi_field_write_to_file dx pgid 1)
	  (mpi_field_write_to_file x pgid 2)
	  (mpi_field_write_to_file oscc_x pgid 3)
	  (LOG_RECORD_INFO "otpt J2\n")
	  (exit 0)))
      )
    )
  (return 0)
  )
(defun-class-Field3D_MPI gen_jac_mat_x int ((Field3D_MPI* dx) (Particle_in_Cell_MPI** fv))
  (decl-var-and-pvar Gaps_IO_DataFile gid)
  (init_parallel_file_for_mpi_fields pthis pgid "tmpJac" -1 0 0)
  (inner-for-from-to i 0 11
    (inner-for-from-to l 0 3
      (blas_yiszero_synced_Field3D_MPI dx dx)
      (set! (GET_FIELD3D_SEQ dx->data 0 i 0 0 l) 1)
      (sync_ovlp_mpi_field dx)
      (Jacobi_x pthis dx fv)
      (mpi_field_write_to_file pthis pgid (+ l (* i 3)))
      )
    )
  (return 0)
  )
(defun init_jfnk_newton_space int ((jfnk_newton_space* pthis) (Field3D_MPI* x) (linear_operator_mpi oscc) (double newton_solve_err) (double solve_err) (int zmax) (int newton_zmax) (double epsl) (void* fv))
  (set-pthis oscc solve_err newton_solve_err epsl fv zmax newton_zmax)
  (init_pthis_mpi_fields pthis (x0 oscc_x0 res_tmp) x)
  (vector-set! pthis->p_vfv 0 ("&" pthis->epsl))
  (vector-set! pthis->p_vfv 1 pthis->fv)
  (vector-set! pthis->p_vfv 2 pthis->x0)
  (vector-set! pthis->p_vfv 3 pthis->oscc)
  (vector-set! pthis->p_vfv 4 pthis->oscc_x0)

  (mpi_init_bicg ("&" pthis->bs) Jacobi_x x zmax solve_err pthis->p_vfv)
  (return 0)
  )
(defun-class-jfnk_newton_space jfnk_newton_simple_mpi int ((Field3D_MPI* inx))
  (CG_LINEAR_YISAX x0 1 inx)
  (oscc oscc_x0 x0 fv)
  (define-double maxv (CG_LINEAR_FINDMAX oscc_x0))
  (define-int z 0)
  (for 0 (> maxv newton_solve_err) (incf! z)
    (LOG_RECORD_INFO "jfnk maxv=%e\n" maxv)
    (if (>= z newton_zmax)
      break
      )
    (CG_LINEAR_SETZERO res_tmp)
    (if 0
      (begin
	(define-Particle_in_Cell_MPI* ppis (vector-ref pthis->p_vfv 1))
	(define-Field3D_MPI* pf ("&" ppis->MPI_fieldEtmp2))
	(gen_jac_mat_x res_tmp pf pthis->p_vfv)
	(exit 0)
	))
    (mpi_simple_bicgstab ("&" bs) res_tmp oscc_x0)
    (CG_LINEAR_AXPY x0 (* -1 jac_pred_rat) res_tmp)
    (oscc oscc_x0 x0 fv)
    (set! maxv (CG_LINEAR_FINDMAX oscc_x0))
    )
  (LOG_RECORD_INFO "jfnk done maxv=%e\n" maxv)
  (CG_LINEAR_YISAX inx 1 x0)
  (if 0
    (block
      (decl-var-and-pvar Gaps_IO_DataFile gid)
      (init_parallel_file_for_mpi_fields inx pgid "tmpJ1" -1 0 0)
      (mpi_field_write_to_file x0 pgid 0)
      (mpi_field_write_to_file oscc_x0 pgid 1)
      (mpi_field_write_to_file inx pgid 2)
      (LOG_RECORD_INFO "otpt J\n")
      (exit 0)
      )
    )

  (return 0)
  )
(defun-class-jfnk_newton_space jfnk_newton_init_parameters int ((int N_l) (int N_M) (double* pmass) (double* pcharge))
  (define-Particle_in_Cell_MPI* ppis fv)
  (set! ppis->o_N_l N_l)
  (set! ppis->o_N_M N_M)
  (set! ppis->o_pmass pmass)
  (set! ppis->o_pcharge pcharge)

  (return 0)
  )
