;checkpoint_data_needed.scmc paravec.scmc

(include< "mpi.h")
(include< "stdio.h")
(include< "stdlib.h")
(include< "math.h")
(include< "assert.h")
(eval-scmc-global (begin (load "pscmc_config_runtime.ss") '()))
(input-scmc "paravec.scmc")
(input-scmc "general_macros.scmc")
(input-all-pscmc-struct)
(input-all-kernel-and-rt)
(eval-scmc-global 
  (begin 
    (load "checkpoint_data_needed.scmc")
    (load "partial.ss")
    (load "patmatch.ss")
    '()
    ))

(include- "space_filling_curve.h")
(include- "mpifields.h")
(include- "init_field3d_mpi.h")
(include< "cgapsio.h")
(include- "mpi_fieldio.h")
(include- "call_curl_kernel.h")
(include- "init_particle.h")
(include- "sort_particle.h")
(include- "init_adjoint_relation.h")
(include- "split_shell.h")
(include- "cfgcst.h")
(typedef Field3D_MPI Field3D_MPI_ALL)
(include- "checkpoint.h")



(eval-scmc-global
  (begin 
    (define IO_BLOCK_LEN 16777216)
    `(begin
       (dec-array char IO_BLOCK_BUFFER ,IO_BLOCK_LEN)
       (pure-text "\n")
       ,(begin-map 
	  (lambda (name)
	    `(defun ,(concat name '_multi_proc) size_t ((char* ptr) (size_t size) (size_t nmemb) (FILE* stream) (int cur_proc) (int num_one_group) (int num_max_proc))
	       (define-size_t ret 0)
	       (define-int io_proc (* (/ cur_proc num_one_group) num_one_group))
	       (if (eq? io_proc cur_proc)
		 (begin
		   (incf! ret (,name ptr size nmemb stream))
		   (for-from-to g (+ io_proc 1) (+ io_proc num_one_group)
		     (if (>= g num_max_proc) break)
		     (define-long alllen)
		     (define-PS_MPI_Status pms)
		     ;(LOG_RECORD_INFO ,(multi-concat "" name " OK bef recv alllen, g=%d, size=%ld\n") g (* size nmemb))
		     (PS_MPI_Recv ("&" alllen) 1 PS_MPI_LONG g g PS_MPI_COMM_WORLD ("&" pms))
		     ;(LOG_RECORD_INFO "OK aft recv alllen, alllen=%ld, rp=%d ,rk=%d\n" alllen g cur_proc)
		     (define l 0)
		     (for 0 (< l alllen) (incf! l ,IO_BLOCK_LEN)
		       (define num_send (- alllen l))
		       (if (> num_send ,IO_BLOCK_LEN) (set! num_send ,IO_BLOCK_LEN))
		       (if (<= num_send 0) break)
		       ,(if (eq? name 'fwrite)
			  `(begin
			     ;(LOG_RECORD_INFO "rank=%d recv remoteproc=%ld numsend=%ld\n" cur_proc g num_send)
			     (PS_MPI_Recv IO_BLOCK_BUFFER num_send PS_MPI_CHAR g (* g 2) PS_MPI_COMM_WORLD ("&" pms))
			     ;(LOG_RECORD_INFO "rank=%d recved numsend=%ld\n" cur_proc num_send)
			     (incf! ret (fwrite IO_BLOCK_BUFFER 1 num_send stream)))
			  `(begin
			     (incf! ret (fread IO_BLOCK_BUFFER 1 num_send stream))
			     (PS_MPI_Send IO_BLOCK_BUFFER num_send PS_MPI_CHAR g (* g 2) PS_MPI_COMM_WORLD)
			     )
			  )
		       )
		     )
		   )
		 (begin
		   (define-long alllen (* size nmemb))
		   (PS_MPI_Send ("&" alllen) 1 PS_MPI_LONG io_proc cur_proc PS_MPI_COMM_WORLD)
		   ;(LOG_RECORD_INFO "rank %d, alllen=%ld, ioproc=%d\n"  cur_proc alllen io_proc)
		   (define l 0)
		   (for 0 (< l alllen) (incf! l ,IO_BLOCK_LEN)
		     (define-long num_send (- alllen l))
		     (if (> num_send ,IO_BLOCK_LEN) (set! num_send ,IO_BLOCK_LEN))
		     (if (<= num_send 0) break)
		     (define-PS_MPI_Status pms)
		     ;(LOG_RECORD_INFO "rank %d numsend=%d\n" cur_proc num_send)
		     ;(if (>= (+ l ,IO_BLOCK_LEN) alllen))
		     ,(if (eq? name 'fwrite) 
			`(PS_MPI_Send (+ ptr l) num_send PS_MPI_CHAR io_proc (* cur_proc 2) PS_MPI_COMM_WORLD)
			`(PS_MPI_Recv (+ ptr l) num_send PS_MPI_CHAR io_proc (* cur_proc 2) PS_MPI_COMM_WORLD ("&" pms))
			)
		     )
		   )
		 )
	       ;(PS_MPI_Barrier PS_MPI_COMM_WORLD)
	       ;(if (eq? cur_proc 0) (LOG_RECORD_INFO "%d wd\n" cur_proc))
	       (return ret)
	       )
	    ) '(fwrite fread))
       ,(begin-map
	  (lambda (x)
	    `(begin
	       (defun ,(concat 'load_ x) long ((FILE* fp) ((,x *) p_data) (int cur_proc) (int num_one_group) (int num_max_proc))
		 (return (fread_multi_proc p_data (sizeof ,x) 1 fp cur_proc num_one_group num_max_proc))
		 )
	       (defun ,(concat 'save_ x) long ((FILE* fp) ((,x *) p_data) (int cur_proc) (int num_one_group) (int num_max_proc))
		 ;(LOG_RECORD_INFO ,(multi-concat "rk=%d beg " x "\n") cur_proc)
		 
		 (return (fwrite_multi_proc p_data (sizeof ,x) 1 fp cur_proc num_one_group num_max_proc))
		 )
	       )
	    ) base_types
	  )
       ,(begin-map
	  (lambda (data_type_desc)
	    (patmatch data_type_desc
	      ((name . subdatas)
		`(begin
		   (defun ,(concat 'load_ name) long ((FILE* fp) ((,name *) datas) (int cur_proc) (int num_one_group) (int num_max_proc))
		     (define-long num_saved)
		     ,(begin-map
			(lambda (x)
			  (gen-load-lists 'datas x)
			  ) subdatas
			)
		     (return num_saved)
		     )
		   (defun ,(concat 'save_ name) long ((FILE* fp) ((,name *) datas) (int cur_proc) (int num_one_group) (int num_max_proc))
		     (define-long num_saved)
		     ;(PS_MPI_Barrier PS_MPI_COMM_WORLD)

		     ;(LOG_RECORD_INFO ,(multi-concat "rk=%d beg " name "\n") cur_proc)
		     ,(begin-map
			(lambda (x)
			  (gen-save-lists 'datas x)
			  ) subdatas
			)
		     (return num_saved)
		     )
		   )
		)
	      )
	    ) data_struct_defs)
       (defun save_state_from_fp int ((FILE* fp) (int cur_proc) (int num_one_group) (int num_max_proc))
	 ,(begin-map
	    (lambda (idif)
	      (define name (car idif))
	      (define type (cdr idif))
	      `(begin 
		 ;(LOG_RECORD_INFO ,(multi-concat "saving " name "\n"))
		 (assert (,(multi-concat 'save_ type) fp ("&" ,name) cur_proc 1 num_max_proc))
		 ;(LOG_RECORD_INFO ,(multi-concat "" name " saved\n"))
		 )
	      ) identity_info
	    )
	 (return 0)
	 )
       (defun load_state_from_fp int ((FILE* fp) (int cur_proc) (int num_one_group) (int num_max_proc))
	 ,(begin-map
	    (lambda (idif)
	      (define name (car idif))
	      (define type (cdr idif))
	      (define prt-format (fast-find-var-in-single-env type type-format-map))
	      `(block
		 (declare ,type tmpvar)
		 (assert (,(multi-concat 'load_ type) fp ("&" tmpvar) cur_proc 1 num_max_proc))
		 (if (neq? tmpvar ,name) 
		   (LOG_RECORD_INFO ,(multi-concat "Error: variable " name " not match " prt-format " != " prt-format "\n") tmpvar ,name)
		   )
		 )
	      ) identity_info
	    )
	 (return 0)
	 )

       (defun load_identity_state_and_alloc_file_pointer FILE* ((int mpi_rank) (int num_one_group))
	 (dec-array char file_name 100)
	 (define-int write_rank (/ mpi_rank num_one_group))
	 (define-int num_max_proc)
	 (PS_MPI_Comm_size PS_MPI_COMM_WORLD ("&" num_max_proc))
	 (sprintf file_name ".save_%d" write_rank)
	 (if (neq? (* write_rank num_one_group) mpi_rank) (return NULL))
	 (define-FILE* fp (fopen file_name "r+"))
	 (if fp 
	   (load_state_from_fp fp mpi_rank num_one_group num_max_proc)
	   )
	 (return fp)
	 )
       (defun save_identity_state_and_alloc_file_pointer FILE* ((int mpi_rank) (int num_one_group))
	 (dec-array char old_file_name 100)
	 (dec-array char new_file_name 100)
	 (define-int write_rank (/ mpi_rank num_one_group))
	 (sprintf old_file_name ".save_%d" write_rank)
	 (sprintf new_file_name ".save_%d_old" write_rank)
	 (define-int num_max_proc)
	 (PS_MPI_Comm_size PS_MPI_COMM_WORLD ("&" num_max_proc))
	 ;(system file_name)
	 (MPI_Barrier MPI_COMM_WORLD)
	 (if (eq? (* write_rank num_one_group) mpi_rank) 
	   (begin
	     (rename old_file_name new_file_name)
	     (LOG_RECORD_INFO "Proc %d: moved\n" write_rank)
	     )
	   )
	 ;(sprintf old_file_name ".save_%d" mpi_rank)
	 (MPI_Barrier MPI_COMM_WORLD)
	 (if (eq? (* write_rank num_one_group) mpi_rank) 
	   (begin
	     (define-FILE* fp (fopen old_file_name "w+"))
	     (save_state_from_fp fp mpi_rank num_one_group num_max_proc)
	     (return fp)
	     )
	   (return NULL)
	   )
	 )
       ))
  )


