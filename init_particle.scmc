;paravec.scmc general_macros.scmc pic_helper.scmc pscmc_config_runtime.ss

(include< "stdio.h")
(include< "stdlib.h")
(include< "string.h")
(include< "assert.h")

(eval-scmc-global 
  (begin (load "pscmc_config_runtime.ss") 
    (load "pic_helper.scmc")
    
    '()))
(input-scmc "paravec.scmc")
(input-scmc "general_macros.scmc")
(include- "genrand.h")
(include- "cfgcst.h")
(include- "init_field3d_mpi.h")
(include- "sync_fields.h")
(include- "blas_shell.h")
(dec-fun user_defined_particle_distribution void ((double* xyzvx) (long xyzx) (long xyzy) (long xyzz) (int cur_sp) (long l) (long grid_load) (long external_para)))
(input-all-pscmc-struct)
(input-all-kernel-and-rt)
(extern long srand_seed)
;(define-scmc-global particle_struct_set_vars-notype (map cadr particle_struct_set_vars))
(defun find_vec_id long ((long id) (long* adj_ids) (long numvec))
  ;(fffor-xyz-from-zero-to numvec 1 1 (LOG_RECORD_INFO "id=%d i=%d, id[i]=%ld\n" id xyzx (vector-ref adj_ids (+ (* NUM_SYNC_LAYER xyzx) (/ NUM_SYNC_LAYER 2)))))
  (define num_id_min (vector-ref adj_ids (/ NUM_SYNC_LAYER 2)))
  (define num_id_max (+ num_id_min (- numvec 1)))
  ;(LOG_RECORD_INFO "f id=%d id_min=%d id_max=%d\n" id num_id_min num_id_max)
  (cond
    ((or (< id num_id_min) (> id num_id_max)) (return -1))
    (else
      (return (- id num_id_min))
      )
    )
  )
(eval-scmc-global
  `(begin
     (defun init_particle int ((One_Particle_Collection* pthis) . ,particle_struct_set_all_vars)
       ,(begin-map
	  (lambda (x)
	    `(begin
	       ;(LOG_RECORD_INFO ,(multi-concat "input " x " = %d\n") ,x)
	       (if (remainder ,x 4) 
		 (set! ,x (* 4 (+ (/ ,x 4) 1)))
		 ;(if (== ,x 0) (set! ,x 4))
		 )
	       ;(LOG_RECORD_INFO ,(multi-concat "output " x " = %d\n") ,x)
	       
	       )
	    )
	  particle_struct_non_uni_cachelen_vars
	  )
       (set-pthis . ,(map cadr particle_struct_set_all_vars))
       (block 
	 (class-header-Field3D_Seq pfield)
	 (define-void** sort_kernel (structp-ref pthis sort_kernel))
	 ;(define-size_t memlen ,)

	 ,(begin-map
	    (lambda (qv)
	      `(set! (structp-ref pthis ,(car qv)) (malloc ,(choose_the_runtime_procedure 'pscmc_mem '(sizeof pscmc_mem))))
	      )
	    quick_variables
	    )
	 ,(init-fun-geo-rel)
	 ,(init-fun-rel)
	 ,(init-fun-krook)
	 ,(init-fun-boris)
	 (define-long num_grids (* numvec xlen ylen zlen))
	 ,(begin-map
	    init-single-kernel
	    (append '(cu_swap_l_6 cu_swap_r_6 move_back_kernel_6 cu_swap_l_8 cu_swap_r_8 move_back_kernel_8) particle_kernel_vars)
	    )
	 ;(choose_the_runtime (cu_swap_r_init pe (structp-ref pthis cu_swap_r_kernel)))
	 ,(let ((m -2)) 
	    (begin-map 
	      (lambda (name)
		(set! m (+ m 2))
		(define strname0 (multi-concat 'gpu_sort_one_grid_ name '_struct))
		(define strname1 (multi-concat 'sort_one_grid_ name '_struct))
		`(begin 
		   (vector-set! sort_kernel ,m (malloc ,(choose_the_runtime_procedure strname0 `(sizeof ,strname0))))
		   (vector-set! sort_kernel ,(+ m 1) (malloc ,(choose_the_runtime_procedure strname1 `(sizeof ,strname1))))
		   (choose_the_runtime (,(multi-concat 'gpu_sort_one_grid_ name '_init) pe (vector-ref sort_kernel ,m)))
		   (choose_the_runtime (,(multi-concat 'sort_one_grid_ name '_init) pe (vector-ref sort_kernel ,(+ m 1))))
		   )
		)
	      '(x_6 y_6 z_6 x_vlo_6 y_vlo_6 z_vlo_6 x_8 y_8 z_8 x_vlo_8 y_vlo_8 z_vlo_8)
	      ))
	 ,(begin-map
	   (lambda (qv)
	    (multi-define name type0 len qv)
	    (define type (find-ps-type type0))
	    `(block
	       (choose_the_runtime (pscmc_mem_init pe (structp-ref pthis ,name) ,type ,len))
	       (define-char* tmp_h_data)
	       (choose_the_runtime (pscmc_get_h_data (structp-ref pthis ,name) ("&" tmp_h_data)))
	       (memset tmp_h_data 0 (* (sizeof ,type0) ,len))
	       )
	     )
	   quick_variables
	   )
	 (block
	   (class-header-One_Particle_Collection pthis)
	   (define-long* adjoint_vec_pids_host (vector-ref (type-convert long** adjoint_vec_pids) 0))
	   (fffor-xyz-from-zero-to numvec 1 1 
	     (define-long* cur_adj_id (+ adjoint_vec_pids_host (* 6 xyzx)))
	     (set! (vector-ref cur_adj_id 0) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 0 1 1 0 1 3 3 3))) adj_ids numvec))
	     (set! (vector-ref cur_adj_id 1) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 2 1 1 0 1 3 3 3))) adj_ids numvec))
	     (set! (vector-ref cur_adj_id 2) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 1 0 1 0 1 3 3 3))) adj_ids numvec))
	     (set! (vector-ref cur_adj_id 3) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 1 2 1 0 1 3 3 3))) adj_ids numvec))
	     (set! (vector-ref cur_adj_id 4) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 1 1 0 0 1 3 3 3))) adj_ids numvec))
	     (set! (vector-ref cur_adj_id 5) (find_vec_id (vector-ref adj_ids (+ (* xyzx NUM_SYNC_LAYER) (GET_IDXYZL 1 1 2 0 1 3 3 3))) adj_ids numvec))
	     ;(define i 0) (for i i<6 i++ (LOG_RECORD_INFO "%d " (vector-ref cur_adj_id i))) (LOG_RECORD_INFO "\n")
	     )
	   (choose_the_runtime (pscmc_mem_sync_h2d adjoint_vec_pids))
	   )
	 )
       (return 0)
       )
     (defun-class-One_Particle_Collection delete_particle int ()
       (class-header-Field3D_Seq pfield)
       ,(begin-map 
	  (lambda (qv)
	    (multi-define name type len qv)
	    (set! type (find-ps-type type))
	    `(begin (choose_the_runtime (pscmc_mem_destroy ,name)) (free ,name))
	    )
	  quick_variables
	  )
       (declare-int i)
       (for i=0 i<3 i++ (free (vector-ref sort_kernel i)))
       (return 0)
       )
     )
  )
(defmacro map-to-core-particle (pthis . body)
  `(block
     (class-header-One_Particle_Collection ,pthis)
     (class-header-Field3D_Seq pfield)
     (define-long alllenoff (* xlen ylen zlen))
     (define-long cur_pcid)
       (define-double* host_data (vector-ref (type-convert double** inoutput) 0))
       (define-int* xyzw_data (vector-ref (type-convert int** xyzw) 0))
       ;(LOG_RECORD_INFO "xyzw=0x%x\n" xyzw_data)
       ;(define-int* load_data (vector-ref (type-convert int** load) 0))
     (for cur_pcid=0 (< cur_pcid numvec) cur_pcid++
       (define-double* grid_r_0 (+ host_data (* cur_pcid alllenoff ,PARTICLE_LEN grid_cache_len)))
       (define-int* xyzw_0 (+ xyzw_data (* cur_pcid alllenoff 4)))
       ;(define-int* load_0 (+ load_data (* cur_pcid alllenoff)))
       (fffor-xyz-from-zero-to xlen ylen zlen
	 (define-double* grid_r (+ grid_r_0 (GET_IDXYZL xyzx xyzy xyzz 0 (* ,PARTICLE_LEN grid_cache_len) xlen ylen zlen)))
	 (define-int* grid_xyzw (+ xyzw_0 (GET_IDXYZL xyzx xyzy xyzz 0 4 xlen ylen zlen)))
	 ;(define-int* grid_load (+ load_0 (GET_IDXYZL xyzx xyzy xyzz 0 1 xlen ylen zlen)))
	 . ,body
	 )
       )
     )
  )
(eval-scmc-global
  (begin
    (define (genmap_mpi name para_opc calc_load grid_body body_opc pre_run_body_mpi para_fmpi call_arg_opc)
      (define opc_name (concat name '_opc))
      (define fmpi_name (concat name '_fmpi))
      `(begin
	 (defun-class-One_Particle_Collection ,opc_name int ,(append para_opc '((int ptlen))) 
	   (map-to-core-particle pthis
	     (define l 0)
	     (define-long grid_load ,(calc_load))
	     (if (> grid_load grid_cache_len)
	       (LOG_RECORD_INFO "Error, gl=%d gcl=%d global_id=%d cur_picid=%d\n" grid_load grid_cache_len (vector-ref global_id cur_pcid) cur_pcid)
	       )
	     (assert (<= grid_load grid_cache_len))
	     ,(grid_body)
	     (for l (< l grid_load) l++
	       (set! (vector-ref grid_xyzw 0) grid_load)
	       (define-double* xyzvs (+ grid_r (* l ptlen)))
	       ,body_opc
	       )
	     )
	   (block
	     (class-header-Field3D_Seq pfield)
	     (memset (vector-ref (type-convert int** cu_xyzw) 0) 0 (* 4 (sizeof int ) numvec))
	     (choose_the_runtime (pscmc_mem_sync_h2d inoutput))
	     (choose_the_runtime (pscmc_mem_sync_h2d xyzw))
	     (choose_the_runtime (pscmc_mem_sync_h2d cu_xyzw))
	     )
	   (return 0)
	   )
	 (defun-class-Field3D_MPI ,fmpi_name int ,para_fmpi
	   ;(LOG_RECORD_INFO "numspec=%d\n" num_spec)
	   ;(exit 0)
	   ,pre_run_body_mpi
	   (declare-int i j)
	   (for i=0 (< i num_spec) i++
	     ;(LOG_RECORD_INFO "%d %d\n" i (vrf (structp-ref (type-convert Particle_in_Cell_MPI* pthis) o_particle_type) i))
	     (if srand_seed (srand srand_seed))
	     (get_ptype-ptlen i)
	     (if (neq? (vrf (structp-ref (type-convert Particle_in_Cell_MPI* pthis) o_particle_type) i) 1)
	       (begin 
		 (LOG_RECORD_INFO ,(multi-concat "info " fmpi_name ": spec=%d\n") i)
		 (for j=0 (< j num_runtime) j++
		   (,opc_name (+ (structp-ref pthis particles) (+ (* i num_runtime) j)) . ,(append call_arg_opc '(ptlen)))
		   ;(,opc_name (+ (structp-ref pthis particles) (+ (* i num_runtime) j)) . ,call_arg_opc)
		   )))
	     )
	   (return 0)
	   )
	 )
      )
    `(begin
       (defun init_particle_mpi int 
	 ((Field3D_MPI* pthis) (int num_spec) . 
	   ,(map 
	      (lambda (x)
		(multi-define tp nm x)
		`(,(concat tp '*) ,nm)
		)
	      particle_struct_set_vvars))
	 (set-pthis num_spec)
	 (define-long num_runtime (structp-ref pthis num_runtime))
	 (set! (structp-ref pthis particles) (TYPE_MALLOC One_Particle_Collection (* num_spec num_runtime)))
	 (declare-int i j)
	 (for i=0 (< i num_spec) i++
	   (for j=0 (< j num_runtime) j++
	     (class-header-Field3D_Seq (+ (structp-ref pthis data) j))
	     (init_particle (+ (structp-ref pthis particles) (+ (* i num_runtime) j)) (+ (structp-ref pthis data) j) . 
	       ,(map 
		  (lambda (x)
		    (if (isinlst (cadr x) particle_struct_non_uni_cachelen_vars)
		      `(* (vector-ref ,(cadr x) i) 
			 (if USE_NON_UNI_CACHE_DIST 
			   (block
			     (define-double cplx 0.0)
			     (for-from-zero-to k numvec
			       (define-double new_cplx (call_GET_NON_UNI_CACHE_DIST i (vector-ref global_id k)))
			       (if (> new_cplx cplx) (set! cplx new_cplx))
			       )
			     cplx
			     ) 1))
		      `(vector-ref ,(cadr x) i))
		    )
		  particle_struct_set_vvars))
	     )
	   )
	 (return 0)
	 )
       (defun-class-Field3D_MPI generate_random_particle_mpi int ()
	 (declare-int i j)
	 (for i=0 (< i num_spec) i++
	   (for j=0 (< j num_runtime) j++
	     (generate_random_self_particle (+ (structp-ref pthis particles) (+ (* i num_runtime) j)))
	     )
	   )
	 (return 0)
	 )
       (defun-class-Field3D_MPI delete_particle_mpi int ()
	 (declare-int i j)
	 (for i=0 (< i num_spec) i++
	   (for j=0 (< j num_runtime) j++
	     (delete_particle (+ (structp-ref pthis particles) (+ (* i num_runtime) j)))
	     )
	   )
	 (free (structp-ref pthis particles))
	 (return 0)
	 )
       (defun-class-One_Particle_Collection generate_random_self_particle int ()
	 (map-to-core-particle pthis 
	   (define l 0)
	   (define-int load (* grid_cache_len 0.8))
	   ;(LOG_RECORD_INFO "idy=%d x=[%d %d %d] " cur_pcid xyzx xyzy xyzz)
	   (for l (< l load) l++
	     (define-double* xyzvs (+ grid_r (* l ,PARTICLE_LEN)))
	     (vector-set! xyzvs 0 (rand01 (- xyzx 1) (+ xyzx 2)))
	     (vector-set! xyzvs 1 (rand01 (- xyzy 1) (+ xyzy 2)))
	     (vector-set! xyzvs 2 (rand01 (- xyzz 1) (+ xyzz 2)))
	     (vector-set! xyzvs 3 0)
	     (vector-set! xyzvs 4 0)
	     (vector-set! xyzvs 5 0))
	   ;(LOG_RECORD_INFO "%e " (vector-ref xyzvs 0))
	   ;(set! (vector-ref grid_load 0) load)
	   (set! (vector-ref grid_xyzw 0) load) 
	   ;(LOG_RECORD_INFO "\n")
	   )
	 (block
	   (class-header-Field3D_Seq pfield)
	   (memset (vector-ref (type-convert int** cu_xyzw) 0) 0 (* 4 (sizeof int ) numvec))
	   (choose_the_runtime (pscmc_mem_sync_h2d inoutput))
	   (choose_the_runtime (pscmc_mem_sync_h2d xyzw))
	   (choose_the_runtime (pscmc_mem_sync_h2d cu_xyzw))
	   )
	 (return 0)
	 )
       ,(genmap_mpi 'init_maxwell_dist_particle '((int tgrid_load) (double VT) (int use_lost_cone) (double mu0) (double delta)) 
	  (lambda () 'tgrid_load) (lambda () '())
	  `(begin
	     (vector-set! xyzvs 0 (rand01 xyzx (+ xyzx 1)))
	     (vector-set! xyzvs 1 (rand01 xyzy (+ xyzy 1)))
	     (vector-set! xyzvs 2 (rand01 xyzz (+ xyzz 1)))
	     (label befmaxinit)
	     (vector-set! xyzvs 3 (maxwell_dist 0 VT))
	     (vector-set! xyzvs 4 (maxwell_dist 0 VT))
	     (vector-set! xyzvs 5 (maxwell_dist 0 VT))
	     (define-double vx (vector-ref xyzvs 3))
	     (define-double vy (vector-ref xyzvs 4))
	     (define-double vz (vector-ref xyzvs 5))
	     (if (>= (runc "vx*vx+vy*vy+vz*vz") 1)
	       (goto befmaxinit))
	     (if use_lost_cone
	       (begin
		 (define-double vall (sqrt (+ (pow vx 2) (pow vy 2) (pow vz 2))))
		 (define-double mu (/ vx vall))
		 (if (not (lost_cone_dist mu mu0 delta))
		   (goto befmaxinit)))
	       )
	     )
	  `(begin
	     (define-int use_lost_cone (call_GET_VAR "USE_LOST_CONE_DIST"))
	     (define mu0 0.0)
	     (define delta 0.0)
	     (if use_lost_cone 
	       (begin
		 (set! mu0 (call_GET_VAR "LOST_CONE_MU0"))
		 (set! delta (call_GET_VAR "LOST_CONE_DELTA"))
		 )
	       )
	     )
	  '() `((call_GET_INIT_LOAD i) (call_GET_INIT_VT i) (if (eq? i 0) use_lost_cone 0) mu0 delta)
	  )

       ,(if #t 
	  (genmap_mpi 'init_user_defined_particle '((int tgrid_load) (int cur_sp) (double vt) (int external_para))
	  (lambda ()
	    `(* (if USE_NON_UNI_DENSITY (call_GET_INIT_DENSITY_DIST cur_sp (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5)) 1) tgrid_load)
	    )
	  (lambda ()
	    '()
	    )
	  `(begin
	     ;(declare-double )
	     (user_defined_particle_distribution xyzvs (+ (vector-ref global_x_offset cur_pcid) xyzx) (+ (vector-ref global_y_offset cur_pcid) xyzy) (+ (vector-ref global_z_offset cur_pcid) xyzz) cur_sp l tgrid_load external_para)
	     (define lx (vrf xyzvs 0))
	     (define ly (vrf xyzvs 1))
	     (define lz (vrf xyzvs 2))
	     (define lvx (vrf xyzvs 3))
	     (define lvy (vrf xyzvs 4))
	     (define lvz (vrf xyzvs 5))
	     ;(assert (and (>= lx 0) (>= ly 0) (>= lz 0) (<= lx 1) (<= ly 1) (<= lz 1) (< (fabs lvx) 1) (< (fabs lvy) 1) (< (fabs lvz) 1)))
	     (incf! (vrf xyzvs 0) xyzx)
	     (incf! (vrf xyzvs 1) xyzy)
	     (incf! (vrf xyzvs 2) xyzz)
	     )
	  '() '() `((call_GET_INIT_LOAD i) i (call_GET_INIT_VT i) 0)
	  )
	  '()
	  )
       ,(genmap_mpi 'init_non_uni_particle '((int tgrid_load) (int cur_sp) (double VT) (double vmax)) 
	  (lambda () 
	    `(* (call_GET_INIT_DENSITY_DIST cur_sp (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5)) tgrid_load))
	  (lambda ()
	    `(begin
	       (declare-double (vx_ijk 0) (vy_ijk 0) (vz_ijk 0))
	       (if USE_INIT_V0
		 ,(begin-map
		    (lambda (x)
		      `(set! ,(multi-concat 'v x '_ijk) (,(multi-concat 'call_GET_INIT_V0_ x) cur_sp  (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5)))
		      )
		    '(x y z)
		   )
		 )
	       (declare-double (tempx 1) (tempy 1) (tempz 1))
	       (if USE_NON_UNI_TEMPERATURE
		 (begin
		   ;(LOG_RECORD_INFO "nonuni temp\n")
		   (set! tempx (call_GET_INIT_TEMPERATURE_DIST cur_sp (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5) 0))
		   (set! tempy (call_GET_INIT_TEMPERATURE_DIST cur_sp (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5) 1))
		   (set! tempz (call_GET_INIT_TEMPERATURE_DIST cur_sp (+ (vector-ref global_z_offset cur_pcid) xyzz 0.5) (+ (vector-ref global_y_offset cur_pcid) xyzy 0.5) (+ (vector-ref global_x_offset cur_pcid) xyzx 0.5) 2))
		   )
		 )
	       )
	    )
	  `(begin
	     (vector-set! xyzvs 0 (rand01 xyzx (+ xyzx 1)))
	     (vector-set! xyzvs 1 (rand01 xyzy (+ xyzy 1)))
	     (vector-set! xyzvs 2 (rand01 xyzz (+ xyzz 1)))

	     (label befmaxinit)
	     (vector-set! xyzvs 3 (maxwell_dist vx_ijk (* tempx VT)))
	     (vector-set! xyzvs 4 (maxwell_dist vy_ijk (* tempy VT)))
	     (vector-set! xyzvs 5 (maxwell_dist vz_ijk (* tempz VT)))
	     (define-double vx (vector-ref xyzvs 3))
	     (define-double vy (vector-ref xyzvs 4))
	     (define-double vz (vector-ref xyzvs 5))
	     (if (>= (runc "vx*vx+vy*vy+vz*vz") vmax)
	       (goto befmaxinit))
	     )
	  '() '((double vmax)) `((call_GET_INIT_LOAD i) i (call_GET_INIT_VT i) vmax)
	  )
       ,(genmap_mpi 'init_single_particle '((int tgrid_load)) (lambda () '(* tgrid_load (and (== cur_pcid 0) (== xyzx 0) (== xyzy 1) (== xyzz 2)))) (lambda () '())
	  `(begin 
	     (vector-set! xyzvs 0 2.051562470070628e+01)
	     (vector-set! xyzvs 1 5.103873771096140e-01)
	     (vector-set! xyzvs 2 2.117478926603960e+01)

	     (vector-set! xyzvs 0 20.840187716996297)
	     (vector-set! xyzvs 0 22.510187716996297)
	     (vector-set! xyzvs 1 0.394382926868275)
	     (vector-set! xyzvs 2 (+ 16 7.830992236267775e-1))
	     (vector-set! xyzvs 2 (+ 16 0.501))

	     (vector-set! xyzvs 0 0.840187716996297)
	     (vector-set! xyzvs 1 1.510187716996297)
	     (vector-set! xyzvs 2 2.894382926868275)


	     (vector-set! xyzvs 3 5.702033215606895e-02)
	     (vector-set! xyzvs 4 -9.189399416639851e-02)
	     (vector-set! xyzvs 5 -1.260855610860580e-02)


	     ;(vector-set! xyzvs 0 (+ 6.5 0e-10))
	     ;(vector-set! xyzvs 1 (+ 6.5 0e-14))
	     ;(vector-set! xyzvs 2 0.0)
	     (vector-set! xyzvs 3 9.515919275216334e-03)
	     (vector-set! xyzvs 4 2.016501485870553e-03)
	     (vector-set! xyzvs 5 -6.310847066259839e-05)

	     (vector-set! xyzvs 3 -1.2e-1)
	     (vector-set! xyzvs 4 2e-1)
	     ;(vector-set! xyzvs 5 1.4e-1)
	     (vector-set! xyzvs 5 1.4e-1)

	     ;(vector-set! xyzvs 0 2.215492687009939e+01)
	     ;(vector-set! xyzvs 1 2.625717303096085e-01)
	     ;(vector-set! xyzvs 2 1.153731810202481e+01)
	     ;(vector-set! xyzvs 3 -1.322104187399731e-01)
	     ;(vector-set! xyzvs 4 1.634850478617333e-03)
	     ;(vector-set! xyzvs 5 4.908995509217107e-02)


	     )
	  '()
	  '() `((if (== j 0) 1 0))
	  )

       ))
  )

(defun-class-Particle_in_Cell_MPI init_global_particles void ((Field3D_MPI* fE) (Field3D_MPI* fE2x) (Field3D_MPI* fEN) (int use_small_num_grids) (int pml_abc_dir) (int pml_level) (double pml_sigma_max) (double deltat) (int num_spec) (long* allxyzmax) (double* massp) (double* chargep ) (double* npm) (long* grid_cache_len) (long* cu_cache_len) (int* particle_types) (int reduce_dim) (double r_x_rat) (double r_y_rat) (double r_z_rat) (double random_rate) (int use_vlo_o) (int use_rel_ncr1))
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldE)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldB)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldE_ext)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldB_ext)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldE_filter)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldB_filter)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldEtmp)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldEtmp1)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldE1)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldEtmp2)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldBtmp)) fE)
  (set! (structp-ref pthis use_rel_ncr) use_rel_ncr1)
  (set! use_rel_ncr use_rel_ncr1)
  (if_rel_ncr
    (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldE01_2x)) fE2x)
    (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldB0_2x)) fE2x)
    )
  (set! (structp-ref pthis o_particle_type) particle_types)
  (set! (structp-ref pthis use_vlo) use_vlo_o)
  (define-int use_small_ts 0)
  (for-from-zero-to i num_spec
    (incf! use_small_ts (vrf particle_types i))
    )
  (eval-scmc-global 
    (begin-map
      (lambda (x)
	`(set! (structp-ref pthis ,(concat 'use_ x)) ,x)
	)
      '(pml_abc_dir pml_level pml_sigma_max)
      ))
  (if pml_abc_dir
    (begin
      (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldPMLB)) fE)
      (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldPMLE)) fE)
      (blas_yiszero_Field3D_MPI ("&" (structp-ref pthis MPI_fieldPMLB)) ("&" (structp-ref pthis MPI_fieldPMLB)))
      (blas_yiszero_Field3D_MPI ("&" (structp-ref pthis MPI_fieldPMLE)) ("&" (structp-ref pthis MPI_fieldPMLE)))
      (set! (structp-ref pthis allxmax) (vrf allxyzmax 0))
      (set! (structp-ref pthis allymax) (vrf allxyzmax 1))
      (set! (structp-ref pthis allzmax) (vrf allxyzmax 2))
      )
    )
  (if (or (eq? USE_FILTER 2) use_small_ts)
    (begin
      ;(init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldEtmp1)) fE)
      (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldBtmp1)) fE)
      ))
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldB1)) fE)
  ;(init_Field3D_MPI_from ("&" (structp-ref pthis MPI_fieldBtmp)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_FoutJ)) fE)
  (init_Field3D_MPI_from ("&" (structp-ref pthis MPI_FoutJtmp)) fE)
  (set! (structp-ref pthis use_small_grid) 0)
  (cond
    ((eq? use_small_num_grids 1)
      (init_Field3D_MPI_from_new_num_ele ("&" (structp-ref pthis MPI_LFoutJ)) fE 375)
      (set! (structp-ref pthis use_small_grid) 1)
      )
    ((eq? use_small_num_grids 2)
      (build_Field_compute_unit_from_mpi_field ("&" (structp-ref pthis MPI_LFoutJ)) fE)
      (set! (structp-ref pthis use_small_grid) 2)
      )
    )
  (set! (structp-ref pthis pMPI_FoutEN) fEN)
  (if USE_FILTER
    (begin
      (init_external_field3d_FILTER_E ("&" (structp-ref pthis MPI_fieldE_filter)))
      (init_external_field3d_FILTER_B ("&" (structp-ref pthis MPI_fieldB_filter)))
      (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldE_filter)))
      (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldB_filter)))
      )
    )
  (if USE_INIT_EXT_EB 
    (begin
      (init_external_field3d_E_2d_extend ("&" (structp-ref pthis MPI_fieldE_ext)) reduce_dim r_x_rat r_y_rat r_z_rat)
      (init_external_field3d_B_2d_extend ("&" (structp-ref pthis MPI_fieldB_ext)) reduce_dim (* r_y_rat r_z_rat) (* r_x_rat r_z_rat) (* r_x_rat r_y_rat))
      (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldE_ext)))
      (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldB_ext)))
      ))
  (if USE_INIT_EB0
    (begin 
      ;(LOG_RECORD_INFO "init EB0\n")
      (init_external_field3d_E0_2d_extend_rand ("&" (structp-ref pthis MPI_fieldE)) reduce_dim r_x_rat r_y_rat r_z_rat random_rate)
      (init_external_field3d_B0_2d_extend_rand ("&" (structp-ref pthis MPI_fieldB)) reduce_dim (* r_y_rat r_z_rat) (* r_x_rat r_z_rat) (* r_x_rat r_y_rat) random_rate)
      )
    (begin
      (test_set_mainland ("&" pthis->MPI_fieldB) 0.)
      (test_set_mainland ("&" pthis->MPI_fieldE) 0.)
      ;(test_set_mainland ("&" pthis->MPI_fieldB1) 0.)
      )
    )
  (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldE)))
  (sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldB)))
  (blas_yisax_Field3D_MPI ("&" (structp-ref pthis MPI_fieldB1)) ("&" (structp-ref pthis MPI_fieldB1)) 1.0 ("&" (structp-ref pthis MPI_fieldB)))
  (if use_rel_ncr
    (begin
      (blas_yiszero_synced_Field3D_MPI ("&" (structp-ref pthis MPI_fieldE01_2x)) ("&" (structp-ref pthis MPI_fieldE01_2x)))
      (blas_yiszero_synced_Field3D_MPI ("&" (structp-ref pthis MPI_fieldB0_2x)) ("&" (structp-ref pthis MPI_fieldB0_2x)))
      (blas_yisax_enlarge_Field3D_MPI ("&" (structp-ref pthis MPI_fieldE)) ("&" (structp-ref pthis MPI_fieldE01_2x)) 1.0 ("&" (structp-ref pthis MPI_fieldE)))
      (blas_yisax_enlarge_Field3D_MPI ("&" (structp-ref pthis MPI_fieldB)) ("&" (structp-ref pthis MPI_fieldB0_2x)) 1 ("&" (structp-ref pthis MPI_fieldB)))
      )
    )
  ;(sync_main_data_h2d ("&" (structp-ref pthis MPI_fieldB1)))
  (set! (structp-ref pthis pMPI_FoutJ) ("&" (structp-ref pthis MPI_FoutJ)))

  ;(LOG_RECORD_INFO "bef init_particle_mpi\n")
  (init_particle_mpi ("&" (structp-ref pthis MPI_fieldE)) num_spec massp chargep npm grid_cache_len cu_cache_len)
  ;(LOG_RECORD_INFO "aft init_particle_mpi\n")
  ;(define-int num_spec (struct-ref (structp-ref pthis MPI_fieldE) num_spec))
  (define-int num_runtime (struct-ref (structp-ref pthis MPI_fieldE) num_runtime))
  (for-from-zero-to i (* num_spec num_runtime)
    (set! (structp-ref (+ (struct-ref (structp-ref pthis MPI_fieldE) particles) i) pfieldE) (+ (struct-ref (structp-ref pthis MPI_fieldE) data) (remainder i num_runtime)))
    (set! (structp-ref (+ (struct-ref (structp-ref pthis MPI_fieldE) particles) i) pfieldB) (+ (struct-ref (structp-ref pthis MPI_fieldB) data ) (remainder i num_runtime)))
    (set! (structp-ref (+ (struct-ref (structp-ref pthis MPI_fieldE) particles) i) pFoutJ) (+ (struct-ref (structp-ref pthis MPI_FoutJ) data) (remainder i num_runtime)))
    (set! (structp-ref (+ (struct-ref (structp-ref pthis MPI_fieldE) particles) i) pLFoutJ) (if use_small_num_grids (+ (struct-ref (structp-ref pthis MPI_LFoutJ) data) (remainder i num_runtime)) NULL))
    (set! (structp-ref (+ (struct-ref (structp-ref pthis MPI_fieldE) particles) i) pFoutEN) (+ (structp-ref (structp-ref pthis pMPI_FoutEN) data) (remainder i num_runtime)))
    )
  (set! (structp-ref pthis dt) deltat)
  ;(set! (structp-ref pthis proc_mpiproc_map) (TYPE_MALLOC long n))
  )
