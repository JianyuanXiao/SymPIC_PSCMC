

;(input-scmc "pscmc_config_runtime.ss")
(input-scmc "../general_macros.scmc")
(input-scmc "../sort_macros.scmc")
(input-include "local_header.h")

;(include< "stdio.h")
(defun is_in int ((long x) (long xl) (long xr))
  (return (and (< x xr) (>= x xl)))
  )

(define-scmc-global gen_move_back_kernel 
  (lambda (ptlen)
    `(defkernel ,(multi-concat 'move_back_kernel '_ (number->string ptlen)) ((double* inoutput) (int* xyzw) (double* cu_cache) (int* cu_xyzw) (long XLEN) (long YLEN) (long ZLEN) (long grid_cache_len) (long cu_cache_length))
       (define-long cu_offset (* __idy XLEN YLEN ZLEN))
       (define-long xyzalllen (* XLEN YLEN ZLEN))
       (INIT_ASYNC_IO_LOCK get_sync_id)
       (INIT_ASYNC_IO_LOCK put_sync_id)

       (define i 0)
       (define j 0)
       (dec-local_shared-array double local_temp_particle_cache ,NUM_ONE_CACHE_LEN ,ptlen)
       (define-int cu_load (vector-ref cu_xyzw (* 4 __idy)))
       (define-int cur_cu_load 0)
       ;(LOG_RECORD_INFO "mb_pcu_c=0x%lx cu_load=%d\n" (+ cu_cache (* cu_cache_length __idy ,ptlen)) cu_load)
       (for i=0 (< i cu_load) (incf! i ,NUM_ONE_CACHE_LEN)
	 (define-long numcp (if (> (+ i ,NUM_ONE_CACHE_LEN) cu_load) (- cu_load i) ,NUM_ONE_CACHE_LEN))
	 (parallel-get-memory (vector-ref local_temp_particle_cache 0) (+ cu_cache (* (+ (* cu_cache_length __idy) i) ,ptlen)) (* numcp ,ptlen))
	 (sync-local)
	 ;(LOG_RECORD_INFO "i=%d numcp=%d\n" i numcp)
	 (if (eq? __idx 0)
	   (for j=0 (< j numcp) j++
	     (define allid (+ i j))
	     (declare-long
	       (xyzx (floor (vrf local_temp_particle_cache j 0)))
	       (xyzy (floor (vrf local_temp_particle_cache j 1)))
	       (xyzz (floor (vrf local_temp_particle_cache j 2)))
	       )
	     (declare-double
	       (dxyzx (vrf local_temp_particle_cache j 0))
	       (dxyzy (vrf local_temp_particle_cache j 1))
	       (dxyzz (vrf local_temp_particle_cache j 2))
	       )
	     (define-int wrted_grid 0)
	     ;(LOG_RECORD_INFO "numcp=%d j=%d p=[%d %d %d] x=[%e %e %e]\n" numcp j xyzx xyzy xyzz dxyzx dxyzy dxyzz)
	     ;(LOG_RECORD_INFO "r_cu=[%e %e %e]\n" )
	     (if (and (is_in xyzx 0 XLEN) (is_in xyzy 0 YLEN) (is_in xyzz 0 ZLEN))
	       (begin
		 (define-long allid_grid (+ (GET_IDXYZL xyzx xyzy xyzz 0 1 XLEN YLEN ZLEN) cu_offset))
		 (define gridload (vrf xyzw (* 4 allid_grid)))
		 ;(LOG_RECORD_INFO "grid_load=%d\n" gridload)
		 (if (< gridload grid_cache_len)
		   (begin
		     (define grid_load_end (+ gridload 1))
		     (set! (vrf xyzw (* 4 allid_grid)) grid_load_end)
		     (PUT_CONT_MEMORY (+ inoutput (* ,ptlen (+ (* allid_grid grid_cache_len) gridload))) (vrf local_temp_particle_cache j) ,ptlen put_sync_id)
		     (set! wrted_grid 1)
		     ))
		 )
	       )
	     (if (not wrted_grid)
	       (begin
		 (PUT_CONT_MEMORY (+ cu_cache (* ,ptlen (+ (* __idy cu_cache_length) cur_cu_load))) (vrf local_temp_particle_cache j) ,ptlen put_sync_id)
		 (incf! cur_cu_load)
		 ;(LOG_RECORD_INFO "cur_cu_load=%d\n" cur_cu_load)
		 )
	       )
	     ))
	 (WAIT_SPARSE_MEMORY put_sync_id)
	 )
       (if (eq? __idx 0)
	 (set! (vrf cu_xyzw (* __idy 4)) cur_cu_load))
       )))
(eval-scmc-global
  `(begin
    ,(gen_move_back_kernel 6)
    ,(gen_move_back_kernel 8)
    ))
