
;(input-scmc "pscmc_config_runtime.ss")
(input-scmc "../general_macros.scmc")
(input-scmc "../sort_macros.scmc")
(input-include "local_header.h")
(input-scmc "../simd_intrin_config.scmc")

;(include< "stdio.h")

(define-scmc-global sort_core 
  (lambda (particle_head particle_head_tmp particle_head_tmp_right use-cu-cache cu_cache_head cu_cache_num cur_load cache_len par_key_offset left_bound right_bound ptlen)
    (define dir
      (case par_key_offset
	(0 'x)
	(1 'y)
	(2 'z)
	)
      )
    (define cap_dir
      (case par_key_offset
	(0 'X)
	(1 'Y)
	(2 'Z)
	)
      )
    (define offset_lens 1)
    (case dir
      ('y (set! cap_dir 'Y) (set! offset_lens 'XLEN))
      ('z (set! cap_dir 'Z) (set! offset_lens '(* XLEN YLEN)))
      (else 0)
      )
    (define (copy-cu-cache to from num-copy num-cap cur_load)
      `(block
	 (define-int num_copy_real_11516lap ,num-copy)
	 (if (> num_copy_real_11516lap ,num-cap)
	   (begin
	     (set! num_copy_real_11516lap ,num-cap)
	     (parallel-copy-memory-gpu (+ ,cu_cache_head (* ,ptlen ,cu_cache_num )) (+ ,from (* num_copy_real_11516lap ,ptlen)) (* ,ptlen (- ,num-copy ,num-cap)))
	     (incf! ,cu_cache_num (- ,num-copy ,num-cap))
	     )
	   )
	 (parallel-copy-memory-gpu (+ ,to (* ,cur_load ,ptlen)) ,from (* num_copy_real_11516lap ,ptlen))
	 (incf! ,cur_load num_copy_real_11516lap)
	 )
      )
    (define num_local_cgn_tln_trn_cache 'IDX_LOCAL_XLEN)
    (define use_local_idx_offset 1)
    (define p_head_o 
      (lambda (id . zid) 
	(set! zid (if (null? zid) 'i (car zid))) 
	`(vector-ref ,particle_head (+ ,zid (* ,ptlen (+  (* __idx __xlen ,use_local_idx_offset) ,id))))))
    (define p_head_o_tmp 
      (lambda (id . zid) 
	(set! zid (if (null? zid) 'i (car zid))) 
	`(vector-ref ,particle_head_tmp (+ ,zid (* ,ptlen (+  (* __idx __xlen ,use_local_idx_offset) ,id))))))
    (define p_head_o_tmp_right
      (lambda (id . zid) 
	(set! zid (if (null? zid) 'i (car zid))) 
	`(vector-ref ,particle_head_tmp_right (+ ,zid (* ,ptlen (+  (* __idx __xlen ,use_local_idx_offset) ,id))))))
    `(begin
       (define cur_load ,cur_load)
       ;(ASSERT (< cur_load (* ,num_local_cgn_tln_trn_cache __xlen)))
       ;(getxyz_blks grid_id XLEN YLEN ZLEN)



       (define-int g 0)
       (define-int lg 0)
       (define plus_offset 0)
       (define minus_offset 0)
       (define left_bound ,left_bound)
       (define right_bound ,right_bound)
       (define-int sizeof_double (sizeof double ))
       (define num_write_minus 0)
       (define num_write_plus 0)
       (define num_write_main 0)
       (define num_write_tmp 0)
       (for lg=0 (< lg cur_load) (set! lg (+ lg (* __xlen __xlen)))
	 (define-int cur_grid_num 0)
	 (define-int to_left_num 0)
	 (define-int to_right_num 0)
	 (dec-local_shared-array int cgn_shared ,num_local_cgn_tln_trn_cache)
	 (dec-local_shared-array int tln_shared ,num_local_cgn_tln_trn_cache)
	 (dec-local_shared-array int trn_shared ,num_local_cgn_tln_trn_cache)

	 (for-from-to p (+ lg (* __idx __xlen)) (+ lg (* __idx __xlen) __xlen)
	   (define-int real_p p)
	   (define-int local_p_id (- p  (+ lg (* __idx __xlen))))
	   (define-int if_exist_particle (< real_p cur_load))
	   (define-double particle_sort_key_element (if if_exist_particle (vector-ref ,particle_head (+ ,par_key_offset (* real_p ,ptlen))) -1))
	   (define-int is_to_left (< particle_sort_key_element left_bound))
	   (define-int is_to_right (> particle_sort_key_element right_bound))
	   (define-int is_cur (and (not is_to_right) (not is_to_left)))
	   (set! is_to_left (and if_exist_particle is_to_left))
	   (set! is_to_right (and if_exist_particle is_to_right))
	   (set! is_cur (and if_exist_particle is_cur))
	   (for-from-zero-to i ,ptlen
	     ,(begin (set! use_local_idx_offset 1) '())
	     (if is_to_left (set! ,(p_head_o_tmp '(+ to_left_num lg)) ,(p_head_o '(+ local_p_id lg))))
	     (if is_to_right (set! ,(p_head_o_tmp_right '(+ to_right_num lg)) ,(p_head_o '(+ local_p_id lg))))
	     (if is_cur (set! ,(p_head_o '(+ cur_grid_num lg)) ,(p_head_o '(+ local_p_id lg))))
	     )
	   (if is_cur (incf! cur_grid_num))
	   (if is_to_left (incf! to_left_num))
	   (if is_to_right (incf! to_right_num))
	   )
	 (vector-set! cgn_shared __idx cur_grid_num)
	 (vector-set! tln_shared __idx to_left_num)
	 (vector-set! trn_shared __idx to_right_num)
	 (sync-local)
	 (define p 0)
	 (for p=0 (< p (* __xlen __xlen)) (incf! p __xlen)
	   ,(begin-map
	      (lambda (head_proc nwm cgns)
		(begin (set! use_local_idx_offset 0) '())
		`(begin
		   (parallel-copy-memory-gpu ("&" ,(head_proc nwm 0)) ("&" ,(head_proc '(+ lg p) 0)) (* (vrf ,cgns (/ p __xlen)) ,ptlen))
		   (incf! ,nwm (vrf ,cgns (/ p __xlen)) )
		   )
		)
	      (list p_head_o p_head_o_tmp p_head_o_tmp_right) '(num_write_main num_write_minus num_write_plus) `(cgn_shared tln_shared trn_shared)
	      )
	   (sync-local)
	   )
	 )
       ,(if use-cu-cache
	  `(begin
	     (define-int is_most_left (== ,(multi-concat 'bxyz dir) 0))
	     (define-int is_most_right (== ,(concat 'bxyz dir) (- ,(concat cap_dir 'LEN) 1)))
	     (define-int beg_left_main grid_cache_len)
	     (define-int beg_plus 0)
	     (define-int end_plus 0)
	     (if (not is_most_left)
	       (begin
		 (set! beg_left_main (vrf xyzw (* 4 (- (+ cu_offset grid_id) ,offset_lens))))
		 (set! beg_plus (vrf xyzw (+ (* 4 (- (+ cu_offset grid_id) ,offset_lens)) 2)))
		 (set! end_plus (vrf xyzw (+ (* 4 (- (+ cu_offset grid_id) ,offset_lens)) 3)))
		 )
	       )
	     ,(begin (set! use_local_idx_offset 0) '())
	     ,(apply copy-cu-cache `(("&" ,(p_head_o 0 0)) ("&" ,(p_head_o `(- beg_plus (* ,offset_lens grid_cache_len)) 0)) (- end_plus beg_plus) (- grid_cache_len num_write_main) num_write_main))
	     (sync-local)
	     ,(apply copy-cu-cache `(("&" ,(p_head_o `(- (* ,offset_lens grid_cache_len)) 0)) ("&" ,(p_head_o_tmp 0 0)) num_write_minus (- grid_cache_len beg_left_main) beg_left_main))
	     (if (and (not is_most_left) (eq? __idx 0))
	       (set! (vrf xyzw (* 4 (- (+ cu_offset grid_id) ,offset_lens))) beg_left_main)
	       )

	     (define-int cap_tmp (if is_most_right 0 (- grid_cache_len num_write_main)))
	     (define-int total_cache_num num_write_main)
	     (sync-local)
	     ,(apply copy-cu-cache `(("&" ,(p_head_o 0 0)) ("&" ,(p_head_o_tmp_right 0 0)) num_write_plus cap_tmp total_cache_num))
	     ;(if (> total_cache_num grid_cache_len) (set! total_cache_num grid_cache_len))
	     (dec-local-array int xm4 4)
	     (set! (vector-ref xm4 0) num_write_main)
	     (set! (vector-ref xm4 1) num_write_main)
	     (set! (vector-ref xm4 2) num_write_main)
	     (set! (vector-ref xm4 3) total_cache_num)
	     (if (eq? __idx 0)
	       (COPY_CONT_MEMORY (+ xyzw (* 4  (+ cu_offset grid_id))) xm4 4))
	     ;(sync-local)
	     )
	  `(begin
	     ,(begin (set! use_local_idx_offset 0) '())
	     (parallel-move-memory ("&" ,(p_head_o `(- ,cache_len num_write_plus) 0)) ("&" ,(p_head_o_tmp_right 0 0)) (* num_write_plus ,ptlen))
	     (dec-local-array int xm4 4)
	     (set! (vector-ref xm4 0) num_write_main)
	     (set! (vector-ref xm4 1) (/ (- ("&" ,(p_head_o_tmp 0 0)) ("&" ,(p_head_o 0 0))) ,ptlen))
	     (set! (vector-ref xm4 2) (/ (- ("&" ,(p_head_o_tmp 'num_write_minus 0)) ("&" ,(p_head_o 0 0))) ,ptlen))
	     (set! (vector-ref xm4 3) (/ (- ("&" ,(p_head_o `(- ,cache_len num_write_plus) 0)) ("&" ,(p_head_o 0 0))) ,ptlen))
	     (if (eq? __idx 0)
	       (COPY_CONT_MEMORY (+ cu_xyzw (* 4  __idy)) xm4 4)
	       )

	     )
	  )
       ))
  )
(defmacro gensort (dir use_vlo ptlen)
  (define cap_dir 'X)
  (define dir_num 0)
  (define USE_DROP_LARGE_VEL #t)
  (define (IF_USE_MACRO use prog)
    (if use
      prog
      '()
      )
    )
  (define vlo_name (if use_vlo '_vlo ""))
  (define offset_lens 1)
  (case dir
    ('y (set! cap_dir 'Y) (set! dir_num 1) (set! offset_lens 'XLEN))
    ('z (set! cap_dir 'Z) (set! dir_num 2) (set! offset_lens '(* XLEN YLEN)))
    (else 0)
    )
  (define grid_particle_mem_loc `(+ inoutput (* (* (+ cu_offset grid_id) grid_cache_len) ,ptlen)))
  (define grid_particle_mem_loc_base `(+ inoutput (* (+ (* cu_offset grid_cache_len)) ,ptlen)))
  `(begin
     (defkernel-with-xlen ,num-xlen-gpu ,(multi-concat 'gpu_sort_one_grid_ dir vlo_name '_ (number->string ptlen)) ((double* inoutput) (int* xyzw) (double* cu_cache) (int* cu_xyzw) (long* adjoint_vec_pids) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long numvec) (long grid_cache_len) (long cu_cache_length))
       (define-long cu_offset (* __idy XLEN YLEN ZLEN))
       (define-long xyzalllen (* XLEN YLEN ZLEN))
       (define i 0)
       (define-int cu_cur_cache_load (vector-ref cu_xyzw (* 4 __idy)))
       (define-double* for_sort_grid_memory_left (+ cu_cache (* ,ptlen (+ (* __idy cu_cache_length) (/ (* 2 cu_cache_length) 5)))))
       (define-double* for_sort_grid_memory_right (+ cu_cache (* ,ptlen (+ (* __idy cu_cache_length) (/ (* 7 cu_cache_length) 10)))))
       (define-double* cu_cache_head (+ cu_cache (* ,ptlen (* __idy cu_cache_length))))

       ,(if use_vlo
	  '()
	  `(for i=0 (< i (* XLEN YLEN ZLEN)) i++
	     (define-long grid_id i)
	     (getxyz_blks grid_id XLEN YLEN ZLEN)
	     (define cur_load0 (vector-ref xyzw (* 4 (+ cu_offset grid_id))))
	     ,(apply sort_core `(,grid_particle_mem_loc for_sort_grid_memory_left for_sort_grid_memory_right  #t cu_cache_head cu_cur_cache_load cur_load0 grid_cache_len ,dir_num ,(concat 'bxyz dir) (+ ,(concat 'bxyz dir) 1) ,ptlen))
	     )
	  )
       ,(apply sort_core `(cu_cache_head for_sort_grid_memory_left for_sort_grid_memory_right #f NULL 0 cu_cur_cache_load cu_cache_length ,dir_num 0 ,(multi-concat cap_dir 'LEN) ,ptlen))
       )
     (defkernel ,(multi-concat 'sort_one_grid_ dir vlo_name '_ (number->string ptlen)) ((double* inoutput) (int* xyzw) (double* cu_cache) (int* cu_xyzw) (long* adjoint_vec_pids) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long numvec) (long grid_cache_len) (long cu_cache_length))
       (define-long cu_offset (* __idy XLEN YLEN ZLEN))
       (define-long xyzalllen (* XLEN YLEN ZLEN))
       (INIT_ASYNC_IO_LOCK get_sync_id)
       (INIT_ASYNC_IO_LOCK put_sync_id)
       (define i 0)
       (dec-local-array double local_temp_particle_cache_plus ,NUM_CACHE_PAR ,ptlen)
       (dec-local-array double local_temp_particle_cache_minus ,NUM_CACHE_PAR ,ptlen)
       (dec-local-array double local_pos_cache ,NUM_ONE_CACHE_LEN ,ptlen)
       ,(IF_USE_MACRO USE_DROP_LARGE_VEL 
	  `(dec-local-array double local_vel_cache ,(* NUM_ONE_CACHE_LEN 3)))
       (dec-local_shared-array int cu_xyzw_shared 4)
       ;(define-int cu_cur_cache_load (vector-ref cu_xyzw (* 4 __idy)))
       ,(if use_vlo
	  '(begin 
	     (parallel-get-memory cu_xyzw_shared (+ cu_xyzw (* 4 __idy)) 4)
	     )
	  `(begin 
	     (define-int cu_cur_cache_load (vector-ref cu_xyzw (* 4 __idy)))
	     ;(LOG_RECORD_INFO "load=%d\n" cu_cur_cache_load)
	     (if (== __idx 0) ,(gen-low-load-sort-procedure dir_num `(+ cu_cache (* __idy ,ptlen cu_cache_length)) 'cu_cur_cache_load 'cu_cache_length 0 (concat cap_dir 'LEN) 'cu_xyzw_shared))
	     ;(LOG_RECORD_INFO "cu_xyzw=[%d,%d,%d,%d]\n" (vrf cu_xyzw_shared 0) (vrf cu_xyzw_shared 1) (vrf cu_xyzw_shared 2) (vrf cu_xyzw_shared 3))
	     )
	  )
       ;(if (== __idx 0) (begin (vector-set! cu_xyzw_shared 0 (vector-ref cu_xyzw (* 4 __idy))) (vector-set! cu_xyzw_shared 1 (+ 100 (vector-ref cu_xyzw (* 4 __idy)))) (vector-set! cu_xyzw_shared 2 (+ 100 (vector-ref cu_xyzw (* 4 __idy)))) (vector-set! cu_xyzw_shared 3 cu_cache_length))) 
       (sync-local)

       ,(if use_vlo
	  '()
	  `(for i=0 (< (+ __idx (* i __xlen)) xyzalllen) i++
	     (define-long grid_id (+ __idx (* i __xlen)))
	     (if (< grid_id xyzalllen)
	       (begin
		 (define cur_load (vector-ref xyzw (* 4 (+ cu_offset grid_id))))
		 (getxyz_blks grid_id XLEN YLEN ZLEN)
		 (define-int g 0)
		 (define-int lg 0)
		 (define plus_offset 0)
		 (define minus_offset 0)
		 (define left_bound ,(concat 'bxyz dir))
		 (define right_bound (+ left_bound 1))
		 (define-int sizeof_double (sizeof double ))
		 (define num_write_minus 0)
		 (define num_write_plus 0)
		 (define num_write_main 0)
		 (define num_write_tmp 0)
		 (for lg=0 (< lg cur_load) (set! lg (+ lg ,NUM_ONE_CACHE_LEN))
		   (define-long num_read (if (> (+ lg ,NUM_ONE_CACHE_LEN) cur_load) (- cur_load lg) ,NUM_ONE_CACHE_LEN))
		   (GET_CONT_MEMORY (vrf local_pos_cache 0) (+ ,grid_particle_mem_loc (* lg ,ptlen)) (* num_read ,ptlen))
		   ,(IF_USE_MACRO USE_DROP_LARGE_VEL 
		      `(GET_SPARSE_MEMORY local_vel_cache (+ ,grid_particle_mem_loc 3 (* lg ,ptlen)) num_read ,ptlen 3)
		      )

		   (for g=0 (< g num_read) g++
		     (cond
		       ((< (vrf (vrf local_pos_cache g) ,dir_num) left_bound) 
			 ;(LOG_RECORD_INFO "pos=%e lb=%d nmrd=%d g=%d lg=%d cl=%d\n" (vector-ref local_pos_cache g) left_bound num_read g lg cur_load)
			 (ASSERT (< num_write_minus ,NUM_CACHE_PAR))
			 (gen-copy-main-data ,grid_particle_mem_loc)
			 ;(GET_SPARSE_MEMORY (vector-ref local_temp_particle_cache_minus num_write_minus) (+ ,grid_particle_mem_loc (* (+ lg g) ,ptlen)) 1 ,ptlen ,ptlen get_sync_id)
			 (for-from-zero-to i ,ptlen (vector-set! (vector-ref local_temp_particle_cache_minus num_write_minus) i (vrf local_pos_cache g i)))
			 ;(PUT_CONT_MEMORY (vector-ref local_temp_particle_cache_minus num_write_minus) (vrf local_pos_cache g) ,ptlen)
			 num_write_minus++
			 )
		       ((> (vrf (vrf local_pos_cache g) ,dir_num) right_bound)
			 (ASSERT (< num_write_plus ,NUM_CACHE_PAR))
			 (gen-copy-main-data ,grid_particle_mem_loc)
			 ;(GET_SPARSE_MEMORY (vector-ref local_temp_particle_cache_plus num_write_plus) (+ ,grid_particle_mem_loc (* (+ g lg) ,ptlen)) 1 ,ptlen ,ptlen get_sync_id)
			 (for-from-zero-to i ,ptlen (vector-set! (vrf local_temp_particle_cache_plus num_write_plus) i (vrf local_pos_cache g i)))
			 num_write_plus++
			 )
		       ,(if USE_DROP_LARGE_VEL
			  `((> 
			      (+ 
				(* (vector-ref local_vel_cache (+ (* g 3) 0)) (vector-ref local_vel_cache (+ (* g 3) 0)))
				(* (vector-ref local_vel_cache (+ (* g 3) 1)) (vector-ref local_vel_cache (+ (* g 3) 1)))
				(* (vector-ref local_vel_cache (+ (* g 3) 2)) (vector-ref local_vel_cache (+ (* g 3) 2)))
				) 1.0)
			     (gen-copy-main-data ,grid_particle_mem_loc)
			     )
			  (0 0)
			  ) 
		       (else 
			 ;(COPY_SPARSE_MEMORY (+ ,grid_particle_mem_loc (* num_write_main ,ptlen)) (+ ,grid_particle_mem_loc (* (+ g lg) ,ptlen)) 1 ,ptlen ,ptlen ,ptlen put_sync_id)
			 num_write_tmp++
			 )
		       )
		     )
		   (gen-copy-main-data ,grid_particle_mem_loc)
		   (WAIT_SPARSE_MEMORY put_sync_id)
		   (WAIT_SPARSE_MEMORY get_sync_id)
		   )
		 ;(set! sync_id 0)
		 (define-int x_main num_write_main)
		 (define-int x_beg_minus x_main)
		 (define-int x_beg_plus (+ (/ (- grid_cache_len cur_load) 2) num_write_minus x_main))
		 (dec-local-array int xm4 4)
		 (set! (vector-ref xm4 0) x_main)
		 (set! (vector-ref xm4 1) (+ num_write_minus x_main))
		 (set! (vector-ref xm4 2) x_beg_plus)
		 (set! (vector-ref xm4 3) (+ num_write_plus x_beg_plus))
		 (PUT_CONT_MEMORY (+ xyzw (* 4 (+ cu_offset grid_id))) xm4 4 put_sync_id)
		 (PUT_CONT_MEMORY (+ ,grid_particle_mem_loc (* x_beg_minus ,ptlen)) (vector-ref local_temp_particle_cache_minus 0) (* ,ptlen num_write_minus) put_sync_id)
		 (if (> (vector-ref xm4 3) grid_cache_len)
		   (begin
		     (define i 0)
		     (for i=0 (< i 4) i++
		       ;(LOG_RECORD_INFO "err, i=%d xyzw[i]=%d\n" i (vector-ref xm4 i))
		       ()
		       )
		     ;(LOG_RECORD_INFO "err, lb=%d nwm=%d nwp=%d xbp=%d xm=%d cl=%d gcl=%d\n" left_bound num_write_minus num_write_plus x_beg_plus x_main cur_load grid_cache_len)
		     (ASSERT 0)
		     )
		   )
		 (PUT_CONT_MEMORY (+ ,grid_particle_mem_loc (* x_beg_plus ,ptlen)) (vector-ref local_temp_particle_cache_plus 0) (* ,ptlen num_write_plus) put_sync_id)
		 (WAIT_SPARSE_MEMORY put_sync_id)))
	     ))
       ;(dec-local_shared-array int cu_cache_load 1)
       ;(if (== __idx 0) (vector-set! cu_cache_load 0 (vector-ref cu_load __idy)))
       (sync-local)
       ;(set! get_sync_id 0)
       ;(set! put_sync_id 0)
       (if 1
	 (for i=0 (< (+ __idx (* i __xlen)) xyzalllen) i++
	   (define-long grid_id (+ __idx (* i __xlen)))
	   (if (< grid_id xyzalllen)
	     (begin
	       (dec-local-array int cur_xyzw 4)
	       (dec-local-array int cur_zw 2)
	       (dec-local-array int prev_zw 2)
	       ;(GET_SPARSE_MEMORY cur_xyzw (+ xyzw (* 4 (+ cu_offset grid_id)) 2) 1 2 2 get_sync_id)
	       (GET_SPARSE_MEMORY cur_xyzw (+ xyzw (* 4 (+ cu_offset grid_id)) 0) 1 4 4 get_sync_id)
	       ;(LOG_RECORD_INFO "cx[%d]=[%d %d %d %d]\n" grid_id (vrf cur_xyzw 0) (vrf cur_xyzw 1) (vrf cur_xyzw 2) (vrf cur_xyzw 3))
	       (getxyz_blks grid_id XLEN YLEN ZLEN)
	       (define-int is_most_left (== ,(multi-concat 'bxyz dir) 0))
	       (define-int is_most_right (== ,(concat 'bxyz dir) (- ,(concat cap_dir 'LEN) 1)))
	       (if is_most_left
		 (begin (set! (vector-ref prev_zw 0) grid_cache_len) (set! (vector-ref prev_zw 1) grid_cache_len))
		 (GET_SPARSE_MEMORY prev_zw (+ xyzw (* 4 (- (+ cu_offset grid_id) ,offset_lens)) 2) 1 2 2 get_sync_id)
		 )

	       (WAIT_SPARSE_MEMORY get_sync_id)
	       (define beg_minus (vector-ref cur_xyzw 0))
	       (define end_minus (vector-ref cur_xyzw 1))
	       (define minus_max (vector-ref cur_xyzw 2))
	       (define beg_plus (vector-ref prev_zw 0))
	       (define end_plus (vector-ref prev_zw 1))
	       (define num_to_left (- end_minus beg_minus))
	       (define num_from_left (- end_plus beg_plus))
	       (define num_cur_remains (- minus_max beg_minus))
	       (define-int num_left_remains (- grid_cache_len beg_plus))
	       ;(define-int num_left_remains (- end_plus beg_plus))
	       (condmacro
		 (0
		   (define j 0)
		   (if (and (== bxyzx 1) (== bxyzy 1)) (begin
							 (LOG_RECORD_INFO "idy=%d x=[%d %d %d] main_load=%d cur_rem=%d " __idy bxyzx bxyzy bxyzz beg_minus num_cur_remains)
							 (for j (< j beg_minus) j++
							   (LOG_RECORD_INFO "%e " (vector-ref ,grid_particle_mem_loc (* j ,ptlen)))
							   )
							 (LOG_RECORD_INFO "\n")
							 (LOG_RECORD_INFO "x=%d left_load=%d " bxyzx (- end_minus beg_minus))
							 (for j=beg_minus (< j end_minus) j++
							   (LOG_RECORD_INFO "%e " (vector-ref ,grid_particle_mem_loc (* j ,ptlen)))
							   )
							 (LOG_RECORD_INFO "\n")
							 (LOG_RECORD_INFO "x=%d right_load=%d " bxyzx (- end_plus beg_plus))
							 (for j=beg_plus (< j end_plus) j++
							   (LOG_RECORD_INFO "%e " (vector-ref ,grid_particle_mem_loc (* j ,ptlen)))
							   )
							 (LOG_RECORD_INFO "\n"))))
		 (else ())
		 )
	       (GET_CONT_MEMORY (vector-ref local_temp_particle_cache_minus 0) (+ ,grid_particle_mem_loc (* beg_minus ,ptlen)) (* ,ptlen num_to_left) get_sync_id)
	       (if num_from_left
		 (GET_CONT_MEMORY (vector-ref local_temp_particle_cache_plus 0) (+ ,grid_particle_mem_loc (* (- beg_plus (* ,offset_lens grid_cache_len)) ,ptlen)) (* ,ptlen num_from_left) get_sync_id))
	       (define-int num_left_to_cu_cache (if (< num_cur_remains num_from_left) (- num_from_left num_cur_remains) 0))
	       (define-int num_cur_to_cu_cache  (if (< num_left_remains num_to_left) (- num_to_left num_left_remains) 0))
	       (set! num_from_left (if (< num_cur_remains num_from_left) num_cur_remains num_from_left))
	       (set! num_to_left (if (< num_left_remains num_to_left) num_left_remains num_to_left))
	       (WAIT_SPARSE_MEMORY get_sync_id)
	       (PUT_CONT_MEMORY (+ ,grid_particle_mem_loc (* beg_minus ,ptlen)) (vector-ref local_temp_particle_cache_plus 0) (* num_from_left ,ptlen) put_sync_id)
	       (if num_to_left
		 (PUT_CONT_MEMORY (+ ,grid_particle_mem_loc (- (* beg_plus ,ptlen) (* ,offset_lens grid_cache_len ,ptlen))) (vector-ref local_temp_particle_cache_minus 0) (* num_to_left ,ptlen) put_sync_id))
	       ;(if (and (== bxyzx 1) ()))
	       (if num_left_to_cu_cache
		 (begin
		   (define-int cur_cu_cache_load (atomic_add_local cu_xyzw_shared num_left_to_cu_cache))
		   ;(LOG_RECORD_INFO "ll=%d nll=%d\n" cur_cu_cache_load num_left_to_cu_cache)
		   (PUT_CONT_MEMORY (+ cu_cache (* __idy cu_cache_length ,ptlen) (* cur_cu_cache_load ,ptlen)) (vector-ref local_temp_particle_cache_plus num_from_left) (* num_left_to_cu_cache ,ptlen) put_sync_id))
		 )
	       (if num_cur_to_cu_cache
		 (begin
		   ;(LOG_RECORD_INFO "bef cus=%d\n" (vector-ref cu_xyzw_shared 2))
		   (define-int cur_cu_cache_load 
		     (if is_most_left
		       (atomic_add_local (+ cu_xyzw_shared 2) num_cur_to_cu_cache)
		       (atomic_add_local cu_xyzw_shared num_cur_to_cu_cache)))
		   ;(LOG_RECORD_INFO "aft cus=%d\n" (vector-ref cu_xyzw_shared 2))
		   ;(LOG_RECORD_INFO "cl=%d nlt=%d\n" cur_cu_cache_load num_cur_to_cu_cache)
		   (PUT_CONT_MEMORY (+ cu_cache (* __idy cu_cache_length ,ptlen) (* cur_cu_cache_load ,ptlen)) (vector-ref local_temp_particle_cache_minus num_to_left) (* num_cur_to_cu_cache ,ptlen) put_sync_id)
		   )
		 )
	       (set! beg_minus (+ beg_minus num_from_left))
	       ;(set! end_minus beg_minus)
	       (vector-set! cur_xyzw 0 beg_minus)
	       (vector-set! cur_xyzw 1 beg_minus)
	       (vector-set! prev_zw 1 (+ beg_plus num_to_left))
	       (PUT_CONT_MEMORY (+ xyzw (* 4 (+ cu_offset grid_id)) 0) cur_xyzw 2 put_sync_id)
	       (if (not is_most_left)
		 (PUT_CONT_MEMORY (+ xyzw (* 4 (+ cu_offset (- grid_id ,offset_lens))) 2) prev_zw 2 put_sync_id)
		 )
	       (if is_most_right 
		 (begin
		   (define cur_beg_plus (vector-ref cur_xyzw 2))
		   (define cur_end_plus (vector-ref cur_xyzw 3))
		   (define cur_to_cu_cache (- cur_end_plus cur_beg_plus))
		   (define-int cur_cu_cache_load (atomic_add_local (+ cu_xyzw_shared 3) (- cur_to_cu_cache)))
		   (vector-set! cur_xyzw 2 beg_minus)
		   (vector-set! cur_xyzw 3 beg_minus)
		   (WAIT_SPARSE_MEMORY put_sync_id)
		   (COPY_CONT_MEMORY (+ cu_cache (* __idy cu_cache_length ,ptlen) (* (- cur_cu_cache_load cur_to_cu_cache) ,ptlen)) (+ ,grid_particle_mem_loc (* ,ptlen cur_beg_plus)) (* ,ptlen cur_to_cu_cache))
		   (PUT_CONT_MEMORY (+ xyzw (* 4 (+ cu_offset grid_id)) 2) (+ cur_xyzw 2) 2 put_sync_id)
		   )
		 )
	       (WAIT_SPARSE_MEMORY put_sync_id)))
	   ))
       (sync-local)
       (if (== __idx 0) (PUT_CONT_MEMORY (+ cu_xyzw (* 4 __idy)) cu_xyzw_shared 4))
       (if 1
	 (for i=0 (< (+ __idx (* i __xlen)) xyzalllen) i++
	   (define-long grid_id (+ __idx (* i __xlen)))
	   (if (< grid_id xyzalllen)
	     (begin
	       (dec-local-array int cur_xyzw 4)
	       (GET_SPARSE_MEMORY cur_xyzw (+ xyzw (* 4 (+ cu_offset grid_id)) 0) 1 4 4)
	       (define beg_minus (vector-ref cur_xyzw 0))
	       (define beg_plus (vector-ref cur_xyzw 2))
	       (define end_plus (vector-ref cur_xyzw 3))
	       (define pluslen (- end_plus beg_plus))
	       (define-int load0 (+ beg_minus pluslen))
	       (vector-set! xyzw (* 4 (+ cu_offset grid_id)) load0)
	       (GET_CONT_MEMORY (vector-ref local_temp_particle_cache_minus 0) (+ ,grid_particle_mem_loc (* beg_plus ,ptlen)) (* ,ptlen pluslen))
	       (PUT_CONT_MEMORY (+ ,grid_particle_mem_loc (* beg_minus ,ptlen)) (vector-ref local_temp_particle_cache_minus 0) (* ,ptlen pluslen))))
	   )) 
       (sync-local)
       )
     ))
(gensort x #f 6)
(gensort y #f 6)
(gensort z #f 6)
(gensort x #t 6)
(gensort y #t 6)
(gensort z #t 6)
(gensort x #f 8)
(gensort y #f 8)
(gensort z #f 8)
(gensort x #t 8)
(gensort y #t 8)
(gensort z #t 8)
(eval-scmc-global 
  (begin-map
    (lambda (ptlen)
      (begin-map 
	(lambda (lor)
	  (define lftbpar (if (eq? lor 'l) `(vector-ref cu_xyzw_shared 1) `(vector-ref cu_xyzw_shared 3)))
	  (define lftepar (if (eq? lor 'l) `(vector-ref cu_xyzw_shared 2) `cu_cache_length))
	  (define lor_num (if (eq? lor 'l) 0 1))
	  `(defkernel ,(multi-concat 'cu_swap_ lor '_ (number->string ptlen)) ((double* cu_cache) (int* cu_xyzw) (long* adjoint_vec_pids) (long cu_cache_length) (int the_dir_num) (long XYZLEN)) ;here adjoint_vec_pids is the logical pid , if not in this cu, then the correspoding pid is -1
	     ,(if_isgpu
		`(begin
		   (dec-local_shared-array int cu_xyzw_shared 4)
		   (dec-local_shared-array long adjoint_vec_pids_shared 2)
		   (parallel-get-memory adjoint_vec_pids_shared (+ adjoint_vec_pids (* 6 __idy) (* 2 the_dir_num)) 2)
		   (parallel-get-memory cu_xyzw_shared (+ cu_xyzw (* 4 __idy)) 4)
		   (sync-local)
		   (define-long left_pid (vector-ref adjoint_vec_pids_shared ,lor_num))
		   (define-int beg_left_par ,lftbpar)
		   (define-int end_left_par ,lftepar)
		   ,(let ((cur_cu_cache `(+ cu_cache (* __idy ,ptlen cu_cache_length))) 
			   (left_cu_cache `(+ cu_cache (* left_pid ,ptlen cu_cache_length))))
		      (define setleft
			`(if (eq? __idx 0)
			   ,(if (eq? lor 'l)
			      `(begin 
				 (set! (vector-ref al1 0) (vector-ref cu_xyzw_shared 3)) 
				 (vector-set! al1 1  (vector-ref cu_xyzw_shared 3)) 
				 (PUT_CONT_MEMORY (+ cu_xyzw (* 4 __idy) 1) al1 2 put_sync_id))
			      `(begin 
				 (set! (vector-ref al1 0) cu_cache_length) 
				 (PUT_CONT_MEMORY (+ cu_xyzw (* 4 __idy) 3) al1 1 put_sync_id))
			      ))
			)
		      `(if (and 1 (and (neq? left_pid -1) (neq? beg_left_par end_left_par)))
			 (begin
			   (define end_cu_par (vector-ref cu_xyzw (+ (* left_pid 4) 0)))
			   (define-int new_left_par (+ end_cu_par (- end_left_par beg_left_par)))
			   (if (eq? __idx 0)
			     (PUT_CONT_MEMORY (+ cu_xyzw (* 4 left_pid)) ("&" new_left_par) 1))
			   (if 1
			     (block
			       (dec-local_shared-array int al1 2)
			       ,setleft
			       ))
			   (sync-local)
			   (define-int i)
			   (if 0 ;(eq? __idx 0)
			   (for-from-to i beg_left_par end_left_par
			     (define-int real_id i)
			     (dec-local-array double par_cache ,ptlen)
			     (GET_CONT_MEMORY par_cache (+ ,cur_cu_cache (* ,ptlen real_id)) ,ptlen)
			     (incf! (vector-ref par_cache the_dir_num) XYZLEN)
			       
			     (PUT_CONT_MEMORY (+ ,left_cu_cache (* ,ptlen end_cu_par)) par_cache ,ptlen)
			     (incf! end_cu_par)
			     ))
			   (if 1
			   (for (set! i beg_left_par) (< (+ i __idx) end_left_par) (incf! i __xlen)
			     (define-int real_id (+ i __idx))
			     (dec-local-array double par_cache ,ptlen)
			     (GET_CONT_MEMORY par_cache (+ ,cur_cu_cache (* ,ptlen real_id)) ,ptlen)
			     (incf! (vector-ref par_cache the_dir_num) XYZLEN)
			       
			     (PUT_CONT_MEMORY (+ ,left_cu_cache (* ,ptlen (+ end_cu_par __idx))) par_cache ,ptlen)
			     (incf! end_cu_par __xlen)
			     ))
			   (sync-local)
			   )
			 )
		      )

		   )

		`(if (== __idx 0) 
		   (begin
		     (dec-local-array int cu_xyzw_shared 4)
		     (dec-local-array long adjoint_vec_pids_shared 2)
		     (INIT_ASYNC_IO_LOCK get_sync_id)
		     (INIT_ASYNC_IO_LOCK put_sync_id)

		     ;(declare-volatile-long get_sync_id put_sync_id)
		     (GET_CONT_MEMORY adjoint_vec_pids_shared (+ adjoint_vec_pids (* 6 __idy) (* 2 the_dir_num)) 2 get_sync_id)
		     (GET_CONT_MEMORY cu_xyzw_shared (+ cu_xyzw (* 4 __idy)) 4 get_sync_id)
		     ;(LOG_RECORD_INFO "[%d %d %d %d]\n" (vrf cu_xyzw 0) (vrf cu_xyzw 1) (vrf cu_xyzw 2) (vrf cu_xyzw 3))
		     ;(for-from-to i (vrf cu_xyzw 1) (vrf cu_xyzw 2) (LOG_RECORD_INFO "left=%e %e %e %e %e %e\n" (vrf cu_cache (* ,ptlen i))  (vrf cu_cache (+ (* ,ptlen i) 1))  (vrf cu_cache (+ (* ,ptlen i) 2)) (vrf cu_cache (+ (* ,ptlen i) 3))  (vrf cu_cache (+ (* ,ptlen i) 4))  (vrf cu_cache (+ (* ,ptlen i) 5))))
		     ;(for-from-to i (vrf cu_xyzw 3) cu_cache_length (LOG_RECORD_INFO "right=%e %e %e %e %e %e\n" (vrf cu_cache (* ,ptlen i))  (vrf cu_cache (+ (* ,ptlen i) 1))  (vrf cu_cache (+ (* ,ptlen i) 2)) (vrf cu_cache (+ (* ,ptlen i) 3))  (vrf cu_cache (+ (* ,ptlen i) 4))  (vrf cu_cache (+ (* ,ptlen i) 5))))
		     ;(for-from-to i 0 (vrf cu_xyzw 0) (LOG_RECORD_INFO "middle=%e %e %e %e %e %e\n" (vrf cu_cache (* ,ptlen i))  (vrf cu_cache (+ (* ,ptlen i) 1))  (vrf cu_cache (+ (* ,ptlen i) 2)) (vrf cu_cache (+ (* ,ptlen i) 3))  (vrf cu_cache (+ (* ,ptlen i) 4))  (vrf cu_cache (+ (* ,ptlen i) 5))))
		     ;(exit 0)
		     (WAIT_SPARSE_MEMORY get_sync_id)
		     (define left_pid (vector-ref adjoint_vec_pids_shared ,lor_num))
		     ;(define end_cu_par (vector-ref cu_xyzw_shared 0))
		     (define beg_left_par ,lftbpar)
		     (define end_left_par ,lftepar)
		     (condmacro 
		       (0
			 (LOG_RECORD_INFO ,(multi-concat "id=%d left_pid=%d lr=" lor "\n") __idy left_pid)
			 (LOG_RECORD_INFO ,(multi-concat "lr=" lor ", __idy=%d, lpid=%d sdl=%d\n") __idy left_pid (- end_left_par beg_left_par))
			 )
		       (else ())
		       )
		     ;(define-long right_pid (vector-ref adjoint_vec_pids_shared 1))
		     ,(let ((cur_cu_cache `(+ cu_cache (* __idy ,ptlen cu_cache_length))) 
			     (left_cu_cache `(+ cu_cache (* left_pid ,ptlen cu_cache_length))))
			(define setleft
			  (if (eq? lor 'l)
			    `(begin 
			       (set! (vector-ref al1 0) (vector-ref cu_xyzw_shared 3)) 
			       (vector-set! al1 1  (vector-ref cu_xyzw_shared 3)) 
			       (PUT_CONT_MEMORY (+ cu_xyzw (* 4 __idy) 1) al1 2 put_sync_id))
			    `(begin 
			       (set! (vector-ref al1 0) cu_cache_length) 
			       (PUT_CONT_MEMORY (+ cu_xyzw (* 4 __idy) 3) al1 1 put_sync_id))
			    )
			  )
			`(if (and 1 (and (neq? left_pid -1) (neq? beg_left_par end_left_par)))
			   (begin
			     (define end_cu_par (vector-ref cu_xyzw (+ (* left_pid 4) 0)))
			     (define-int new_left_par (+ end_cu_par (- end_left_par beg_left_par)))
			     (PUT_CONT_MEMORY (+ cu_xyzw (* 4 left_pid)) ("&" new_left_par) 1 put_sync_id)
			     (if 1
			       (block
				 (dec-local-array int al1 2)
				 ,setleft
				 ))
			     (dec-local-array double local_cache ,NUM_CACHE_PAR ,ptlen)
			     (define-int i)
			     (for (set! i beg_left_par) (< i end_left_par) (incf! i ,NUM_CACHE_PAR)
			       (define-int num_cp (if (> (+ i ,NUM_CACHE_PAR) end_left_par) (- end_left_par i) ,NUM_CACHE_PAR))
			       (GET_CONT_MEMORY (vector-ref local_cache 0) (+ ,cur_cu_cache (* ,ptlen i)) (* ,ptlen num_cp))
			       (define-int ii)
			       (for (set! ii 0) (< ii num_cp) ii++
				 (incf! (vector-ref (vector-ref local_cache ii) the_dir_num) XYZLEN)
				 )
			       (PUT_CONT_MEMORY (+ ,left_cu_cache (* ,ptlen end_cu_par)) (vector-ref local_cache 0) (* ,ptlen num_cp))
			       (incf! end_cu_par num_cp)
			       )
			     (WAIT_SPARSE_MEMORY put_sync_id)
			     )
			   )
			)
		     )
		   ))
	     )) '(l r))) '(6 8))
  )
