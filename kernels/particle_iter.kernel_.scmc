
;(input-scmc "pscmc_config_runtime.ss")
(input-scmc "../general_macros.scmc")
(input-scmc "../sort_macros.scmc")
(input-scmc "../simd_intrin_config.scmc")

(input-include "local_header.h")
;(eval-scmc-global (begin (system "./genDECscheme.sh > decscheme.ss") '()))
(eval-scmc-global (begin (load "../decscheme.ss") '()));this loads fl[0-9]
(eval-scmc-global (begin (load "../genr0r1r2.ss") '()))

(eval-scmc-global 
  (cond 
    ((or (eq? RUNTIME 'C) (eq? RUNTIME 'OpenMP) (eq? RUNTIME 'SWMC) (eq? RUNTIME 'COI))
      `(begin 
	 (include< "stdio.h")
	 ,(if USE_INTRIN
	    `(include< ,SIMD_HEADER)
	    '()
	    )
	 )
      )
    (else '())
    )
  )
(input-scmc "../particle_macros.scmc")

(define-scmc-global Elen 6)
(defun rand01_k double ((double x0) (double x1))
  ;(return (+ (/ (* (- x1 x0) (+ 0.5 (rand))) (+ (type-convert double RAND_MAX) 1.0)) x0))
  (return 0)
  )
(defun maxwell_dist_k double ((double ava) (double sig))
  ;(return (runc "sig*sqrt(-2.*log(rand01_k(0,1)))*cos(M_PI*2.*rand01_k(0,1))+ava"))
  (return 0)
  )

(defmacro gen_EB-proc (B0 xyz_num)
  `(block
     (declare-double (sum0 0.0))
     (fffor-xyz-from-zero-to 4 4 4
       (declare-int (allidx (+ xyzx (* 4 (+ xyzy (* 4 xyzz))))))
       (incf! sum0 
	 (* (vrf ,B0 (+ (* allidx 3) ,xyz_num))
	   (vrf f_x_arr xyzx) (vrf f_y_arr xyzy) (vrf f_z_arr xyzz)
	   )
	 )
       )
     sum0
     )
  )


(eval-scmc-global 
  (begin-map 
    (lambda (xyz) 
      (define cap_dir 'X)
      (define dir_num 0)
      (define offset_lens 1)
      (case xyz
	('y (set! cap_dir 'Y) (set! dir_num 1) (set! offset_lens 'XLEN))
	('z (set! cap_dir 'Z) (set! dir_num 2) (set! offset_lens '(* XLEN YLEN)))
	(else 0)
	)
      (define grid_particle_mem_loc `(+ inoutput (* (* (+ cu_offset grid_id) grid_cache_len) ,PARTICLE_LEN)))
      (define grid_particle_mem_loc_base `(+ inoutput (* (+ (* cu_offset grid_cache_len)) ,PARTICLE_LEN)))
      (define fsplit_main (lambda (x) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'FoutJ #f #f #f)))
      (define fsplit_main_nopush (lambda (x) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'FoutJ #f #f #f #t)))
      (define fsplit_main_sg (lambda (x) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'LFoutJ #t #f #f)))
      (define fsplit_main_sg2 (lambda (x) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'LFoutJ 2 #f #f)))
      (define fsplit_main_vlo (lambda (x t) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'FoutJ #f #t t)))
      (define fsplit_main_vlo_nopush (lambda (x t) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'FoutJ #f #t #f #t)))
      (define fsplit_main_vlo_sg (lambda (x) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'LFoutJ #t #t #f)))
      (define fsplit_main_vlo_sg2 (lambda (x t) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'LFoutJ 2 #t t)))
      (define fsplit_main_vlo_sg2_nopush (lambda (x t) (gen_split_pass_calc_grid x 'load0 xyz 'shBy 'shBz 'shJx 'fieldE 'fieldB 'LFoutJ 2 #t #f #t)))
      (define J/JL 
	(lambda (numJ)
	  (lambda ()
	    `(begin 
	       (dec-local_shared-array double shBy 60) 
	       (dec-local_shared-array double shBz 60) 
	       (dec-local_shared-array double shJx ,numJ)
	       ,(if_isgpu
		  `(dec-array double Jaccumulate 5) ;Note that this means every 16 threads save 80 tmp J values
		  `(dec-local_shared-array double shJx_allidx (* 80 IDX_OPT_MAX ,VECLEN))
		  )
	       (dec-local_shared-array double ByzJxtmp 80 3)
	       (dec-local_shared-array double incJxtmp IDX_OPT_MAX)
	       ;(define-double* incJxtmp ByzJxtmp)
	       )
	    )
	  )
	)
      (define faddJ 
	(J/JL 80)
	)
      (define faddJL 
	(J/JL 125)
	)
      (define vlo_sort_funs 
	(list
	  (lambda ()
	    `(begin
	       (define-long cu_offset (* __idy numgrid))
	       (define-long xyzalllen numgrid)
	       (INIT_ASYNC_IO_LOCK get_sync_id)
	       (INIT_ASYNC_IO_LOCK put_sync_id)
	       (dec-local-array double local_temp_particle_cache ,(* 2 NUM_CACHE_PAR) ,PARTICLE_LEN)
	       ;(dec-local-array double local_temp_particle_cache_minus ,NUM_CACHE_PAR ,PARTICLE_LEN)
	       ;(dec-)
	       (dec-local_shared-array int cu_xyzw_shared 4)

	       )
	    )
	  (lambda () 
	    `(block
	       (dec-local-array double local_pos_cache ,NUM_ONE_CACHE_LEN ,PARTICLE_LEN)
	       (if (and (< __idy numvec) (== __idx 0)) 
		 (begin
		   (define-int cu_cur_cache_load (vector-ref cu_xyzw (* 4 __idy)))
		   ;(LOG_RECORD_INFO "load=%d\n" cu_cur_cache_load)
		   ,(gen-low-load-sort-procedure dir_num `(+ cu_cache (* __idy ,PARTICLE_LEN cu_cache_length)) 'cu_cur_cache_load 'cu_cache_length 0 (concat cap_dir 'LEN) 'cu_xyzw_shared)
		   ;(LOG_RECORD_INFO "cu_xyzw=[%d,%d,%d,%d]\n" (vrf cu_xyzw_shared 0) (vrf cu_xyzw_shared 1) (vrf cu_xyzw_shared 2) (vrf cu_xyzw_shared 3))
		   )
		 )
	       (sync-local)
	       (if (< __idy numvec)
		 (parallel-put-memory (+ cu_xyzw (* 4 __idy)) cu_xyzw_shared 4))
	       (sync-local)
	       ))
	  (lambda () '())
	  ))
      (define name_main (concat 'split_pass_ xyz))
      `(begin 
	 ,(gen_push_kernel name_main all_vars fsplit_main faddJ)
	 ,(gen_push_kernel (concat name_main '_nopush) all_vars fsplit_main_nopush faddJ)
	 ,((gen-genpushkernel #f vlo_sort_funs #t) (concat name_main '_vlo) all_vars fsplit_main_vlo faddJ)
	 ,((gen-genpushkernel #f vlo_sort_funs #t) (concat name_main '_vlo_nopush) all_vars fsplit_main_vlo_nopush faddJ)
	 ;,(gen_push_kernel (concat name_main '_vlo) all_vars fsplit_main_vlo faddJ)
	 ,(gen_push_kernel_small_grids name_main all_vars_sg fsplit_main_sg faddJL IDX_LCL_SPEC_LEN)
	 ,(gen_push_kernel_small_grids (concat name_main '_sg2) all_vars_sg fsplit_main_sg2 faddJL IDX_LCL_SPEC_LEN)
	 ,(gen_push_kernel_small_grids (concat name_main '_vlo) all_vars_sg fsplit_main_vlo_sg faddJL IDX_LCL_SPEC_LEN)
	 ,((gen-genpushkernel #t vlo_sort_funs #t) (concat name_main '_vlo_sg2) all_vars_sg fsplit_main_vlo_sg2 faddJ IDX_LCL_SPEC_LEN)
	 ,((gen-genpushkernel #t vlo_sort_funs #t) (concat name_main '_vlo_sg2_nopush) all_vars_sg fsplit_main_vlo_sg2_nopush faddJ IDX_LCL_SPEC_LEN)
	 )) '(x y z)))



(eval-scmc-global 
  (begin
    (list 'begin
    (gen_push_kernel 'split_pass_E_particle all_vars
      (lambda (x) (gen_passE_calc_grid x 'load0 'shE 'fieldE #f #f))
      (lambda () `(dec-local_shared-array double shE 192))
      )
    (gen_push_kernel 'split_pass_E_particle_vlo all_vars
      (lambda (x) (gen_passE_calc_grid x 'load0 'shE 'fieldE #t #f))
      (lambda () `(dec-local_shared-array double shE 192))
      )
    (gen_push_kernel 'boris_yee all_vars_new
      (lambda (particle_head)
	`(if load0
	   (begin
	     (define-double QE_MASS (/ Charge0 Mass0))
	     (define-int Midx (floor (vrf ,particle_head 0)))
	     (define-int Midy (floor (vrf ,particle_head 1)))
	     (define-int Midz (floor (vrf ,particle_head 2)))
	     (define-int Bidx (- Midx 1))
	     (define-int Bidy (- Midy 1))
	     (INIT_ASYNC_IO_LOCK get_sync_id)
	     (INIT_ASYNC_IO_LOCK get_j_sync_id)
	     (INIT_ASYNC_IO_LOCK put_sync_id)

	     (define-int Bidz (- Midz 1))

	     (fffor-xyz-from-zero-to 1 4 4 
	       (define-int total_idx (* 3 4 (+ xyzy (* xyzz 4))))
	       (parallel-get-memory (+ shE total_idx) (+ fieldE (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) 12 get_sync_id)
	       (parallel-get-memory (+ shB total_idx) (+ fieldB (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) 12 get_sync_id)
	       (parallel-get-memory (+ shJ total_idx) (+ FoutJ (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) 12 get_sync_id)
	       )
	     (for-from-zero-to-cache-opt ((,particle_head local_particle_head double 6 ,PARTICLE_LEN)) ,PAR_CACHE_LEN g load0
	       (begin
	       (define-double xx0 (vrf local_particle_head g 0))
	       (define-double xy0 (vrf local_particle_head g 1))
	       (define-double xz0 (vrf local_particle_head g 2))
	       (define-double rx0 (- xx0 Midx))
	       (define-double ry0 (- xy0 Midy))
	       (define-double rz0 (- xz0 Midz))
	       (define-double vx0 (vrf local_particle_head g 3))
	       (define-double vy0 (vrf local_particle_head g 4))
	       (define-double vz0 (vrf local_particle_head g 5))
	       ,(begin-map
		  (lambda (xyz)
		    ;(set! xyz (number->string xyz))
		    (define arrname (multi-concat 'f_ xyz '_arr))
		    `(begin
		       (dec-local-array double ,arrname 4)
		       ,(begin-map
			 (lambda (i)
			   `(vector-set! ,arrname ,i ,(eval (list (multi-concat 'fl (number->string i)) (list 'quote (multi-concat 'r xyz "0")))))
			   )
			 '(0 1 2 3)
			 )
		       )
		    )
		 '(x y z))
	       (define-double Ex0 (gen_EB-proc shE 0))
	       (define-double Ey0 (gen_EB-proc shE 1))
	       (define-double Ez0 (gen_EB-proc shE 2))
	       (define-double Bx0 (gen_EB-proc shB 0))
	       (define-double By0 (gen_EB-proc shB 1))
	       (define-double Bz0 (gen_EB-proc shB 2))
	       (define dt Deltat)
	       (define-double vx1 (runc "((pow(dt,3)*(Bx0*Bz0*Ez0+Bx0*By0*Ey0)+pow(Bx0,2)*pow(dt,3)*Ex0)*pow(QE_MASS,3)+(2*Bx0*Bz0*pow(dt,2)*vz0+2*Bx0*By0*pow(dt,2)*vy0+(-pow(Bz0,2)-pow(By0,2)+pow(Bx0,2))*pow(dt,2)*vx0+pow(dt,2)*(2*Bz0*Ey0-2*By0*Ez0))*pow(QE_MASS,2)+(-4*By0*dt*vz0+4*Bz0*dt*vy0+4*dt*Ex0)*QE_MASS+4*vx0)*pow((pow(Bz0,2)+pow(By0,2)+pow(Bx0,2))*pow(dt,2)*pow(QE_MASS,2)+4,-1.0)"))
	       (define-double vy1 (runc "((pow(dt,3)*(By0*Bz0*Ez0+pow(By0,2)*Ey0)+Bx0*By0*pow(dt,3)*Ex0)*pow(QE_MASS,3)+(2*By0*Bz0*pow(dt,2)*vz0+(-pow(Bz0,2)+pow(By0,2)-pow(Bx0,2))*pow(dt,2)*vy0+2*Bx0*By0*pow(dt,2)*vx0+2*Bx0*pow(dt,2)*Ez0-2*Bz0*pow(dt,2)*Ex0)*pow(QE_MASS,2)+(4*Bx0*dt*vz0-4*Bz0*dt*vx0+4*dt*Ey0)*QE_MASS+4*vy0)*pow((pow(Bz0,2)+pow(By0,2)+pow(Bx0,2))*pow(dt,2)*pow(QE_MASS,2)+4,-1.0)"))
	       (define-double vz1 (runc "((pow(dt,3)*(pow(Bz0,2)*Ez0+By0*Bz0*Ey0)+Bx0*Bz0*pow(dt,3)*Ex0)*pow(QE_MASS,3)+((pow(Bz0,2)-pow(By0,2)-pow(Bx0,2))*pow(dt,2)*vz0+2*By0*Bz0*pow(dt,2)*vy0+2*Bx0*Bz0*pow(dt,2)*vx0-2*Bx0*pow(dt,2)*Ey0+2*By0*pow(dt,2)*Ex0)*pow(QE_MASS,2)+(-4*Bx0*dt*vy0+4*By0*dt*vx0+4*dt*Ez0)*QE_MASS+4*vz0)*pow((pow(Bz0,2)+pow(By0,2)+pow(Bx0,2))*pow(dt,2)*pow(QE_MASS,2)+4,-1.0)"))
	       (define-double xx1 (+ xx0 (* Deltat vx1)))
	       (define-double xy1 (+ xy0 (* Deltat vy1)))
	       (define-double xz1 (+ xz0 (* Deltat vz1)))
	       (set! (vrf local_particle_head g 0) xx1)
	       (set! (vrf local_particle_head g 1) xy1)
	       (set! (vrf local_particle_head g 2) xz1)
	       (set! (vrf local_particle_head g 3) vx1)
	       (set! (vrf local_particle_head g 4) vy1)
	       (set! (vrf local_particle_head g 5) vz1)
	       (fffor-xyz-from-zero-to 4 4 4
		 (define-scalar-int total_idx (* 3 (+ xyzx (* 4 (+ xyzy (* xyzz 4))))))
		 (define-double coeff (* (vrf f_x_arr xyzx) (vrf f_y_arr xyzy) (vrf f_z_arr xyzz)))
		 ;(define-scalar-double scoeff (reduce + coeff))
		 (define-double vxall (* coeff vx1))
		 (define-double vyall (* coeff vy1))
		 (define-double vzall (* coeff vz1))
		 (define-scalar-double svxall (reduce + vxall))
		 (define-scalar-double svyall (reduce + vyall))
		 (define-scalar-double svzall (reduce + vzall))
		 (incf! (vrf shJ (+ total_idx 0)) (* svxall Charge0 ))
		 (incf! (vrf shJ (+ total_idx 1)) (* svyall Charge0 ))
		 (incf! (vrf shJ (+ total_idx 2)) (* svzall Charge0 ))
		 )
	       (fffor-xyz-from-zero-to 1 4 4 
		 (define-scalar-int total_idx (* 3 4 (+ xyzy (* 4 xyzz)))) 
		 (PUT_CONT_MEMORY (+ FoutJ (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) (+ shJ total_idx) 12 put_sync_id)
		 )
	       (WAIT_SPARSE_MEMORY put_sync_id))
	       ()
	       )
	     )
	   )
	)
      (lambda () 
	`(begin 
	   (dec-local_shared-array double shE 192)
	   (dec-local_shared-array double shB 192)
	   (dec-local_shared-array double shJ 192)
	   ))
      )
    (gen_push_kernel 'krook_collision_remove_small_speed (append all_vars_new '((double mu_freq))) ;here the mu_freq is the speed limit, E[J][0] is the remove region, E[J][1] is the speed limit if mu_freq==0, E[J][2] is the number of particles in the generation region, E[J][3] is the v_t generation region
      (lambda (particle_head)
	`(if load0
	   (begin
	     (define-int Midx (if use_local_particle_position (floor (vrf ,particle_head 0)) mdx))
	     (define-int Midy (if use_local_particle_position (floor (vrf ,particle_head 1)) mdy))
	     (define-int Midz (if use_local_particle_position (floor (vrf ,particle_head 2)) mdz))

	     ;(define-int Midx (floor (vrf ,particle_head 0)))
	     ;(define-int Midy (floor (vrf ,particle_head 1)))
	     ;(define-int Midz (floor (vrf ,particle_head 2)))
	     (define-int mode 0)
	     (define-double mu_freq1)
	     (define-double v_t_gen)
	     (define-int num_gen 0)
	     (if (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 0 0 ,Elen))
	       (begin
		 (set! mode 1)
		 (set! mu_freq1 mu_freq)

		 (if (eq? mu_freq 0)
		   (set! mu_freq1 (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 1 0 ,Elen)))
		   )
		 )
	       )
	     (if (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 3 0 ,Elen))
	       (begin
		 (set! mode 2)
		 (set! v_t_gen (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 3 0 ,Elen)))
		 (set! num_gen (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 2 0 ,Elen)))) 
	       )
	     ;(fprintf stderr "x=%d mode=%d\n" Midx mode)
	     (define-int lg 0)
	     (define-int __idx_all_remove 0)
	     ;(define-int new_load load0)
	     (if (== __idx 0)
	       (if (eq? mode 1)
		 (for 0 (< (+ ,PAR_CACHE_LEN lg) load0) (incf! lg ,PAR_CACHE_LEN)
		   (dec-local-array double a_rva ,PAR_CACHE_LEN 6)
		   (define-int __idx_all_base (+ (* __idx ,PAR_CACHE_LEN) lg))
		   (define-int numcp
		     ,(case RUNTIME
			('SWMC `(if (>= (+ __idx_all_base ,PAR_CACHE_LEN) load0) (- load0 __idx_all_base) ,PAR_CACHE_LEN))
			(else 1)
			)
		     )
		   (GET_SPARSE_MEMORY (vrf a_rva 0) (+ ,particle_head (* __idx_all_base ,PARTICLE_LEN)) numcp ,PARTICLE_LEN 6)
		   (define-int numcp_remove 0)
		   (for-from-zero-to g numcp
		     (define vx (vrf a_rva g 3))
		     (define vy (vrf a_rva g 4))
		     (define vz (vrf a_rva g 5))
		     (if (< (* Mass0 (+ (* vx vx) (* vy vy) (* vz vz))) (* mu_freq1 mu_freq1))
		       (begin
			 (if (neq? numcp_remove g)
			   (for-from-zero-to s ,PARTICLE_LEN
			     (set! (vrf a_rva numcp_remove s) (vrf a_rva g s))
			     ))
			 (incf! numcp_remove))
		       (incf! new_load -1)
		       )
		     )
		   ;(LOG_RECORD_INFO "Mass=%e\n" Mass)
		   (PUT_CONT_MEMORY (+ ,particle_head (* __idx_all_remove ,PARTICLE_LEN)) (vrf a_rva 0) (* numcp_remove ,PARTICLE_LEN))
		   (incf! __idx_all_remove numcp_remove)
		   )
		 (if (eq? mode 2)
		   (begin
		     (if (> num_gen new_load)
		       (begin
			 (for-from-to g num_gen new_load
			   (dec-array double a_rva 6)
			   (vector-set! a_rva 0 (rand01_k Midx (+ Midx 1)))
			   (vector-set! a_rva 1 (rand01_k Midy (+ Midy 1)))
			   (vector-set! a_rva 2 (rand01_k Midz (+ Midz 1)))
			   (vector-set! a_rva 3 (maxwell_dist_k 0 v_t_gen))
			   (vector-set! a_rva 4 (maxwell_dist_k 0 v_t_gen))
			   (vector-set! a_rva 5 (maxwell_dist_k 0 v_t_gen))
			   (PUT_CONT_MEMORY (+ ,particle_head (* ,PARTICLE_LEN g)) a_rva ,PARTICLE_LEN)
			   )
			 )
		       )
		     (if num_gen
		       (set! new_load num_gen))))
		 ;(set! (vrf xyzw (* 4 (+ (* __idy numgrid) allgid))) new_load)
		 )
	       )
	     )
	   )
	)
      (lambda () '()))
    (gen_push_kernel 'krook_collision_test (append all_vars_new '((double mu_freq)))
      (lambda (particle_head sort_fun . cont-goto)
	(define cont-proc 
	  (if (null? cont-goto)
	    '(continue)
	    ((car cont-goto))
	    ))
	`(if load0
	   (begin
	     ;(define-int Midx (floor (vrf ,particle_head 0)))
	     ;(define-int Midy (floor (vrf ,particle_head 1)))
	     ;(define-int Midz (floor (vrf ,particle_head 2)))
	     (define-int Midx (if use_local_particle_position (floor (vrf ,particle_head 0)) mdx))
	     (define-int Midy (if use_local_particle_position (floor (vrf ,particle_head 1)) mdy))
	     (define-int Midz (if use_local_particle_position (floor (vrf ,particle_head 2)) mdz))
	     (define-double mu_freq1)
	     (if (not (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 0 0 ,Elen)))
	       ,cont-proc
	       (set! mu_freq1 mu_freq)
	       )
	     (if (eq? mu_freq 0)
	       (set! mu_freq1 (vector-ref fieldE (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 1 0 ,Elen)))
	       )
	     (define lg 0)
	     (for 0 (< (+ (* __idx ,PAR_CACHE_LEN) lg) load0) (incf! lg (* __xlen ,PAR_CACHE_LEN))
	       (dec-local-array double a_rva ,PAR_CACHE_LEN 6)
	       (define-int __idx_all_base (+ (* __idx ,PAR_CACHE_LEN) lg))
	       (define-int numcp
		 ,(case RUNTIME
		    ('SWMC `(if (>= (+ __idx_all_base ,PAR_CACHE_LEN) load0) (- load0 __idx_all_base) ,PAR_CACHE_LEN))
		    (else 1)
		    )
		 )
	       (GET_SPARSE_MEMORY (vrf a_rva 0) (+ ,particle_head (* __idx_all_base ,PARTICLE_LEN)) numcp ,PARTICLE_LEN 6)
	       (for-from-to g 0 numcp
		 (define vx (vrf a_rva g 3))
		 (define vy (vrf a_rva g 4))
		 (define vz (vrf a_rva g 5))
		 ;(for-from-to i 0 6 (LOG_RECORD_OUT "%.15e " (vrf a_rva g i))) (LOG_RECORD_OUT "\n") (fflush stdout )
		 (set! (vrf a_rva g 3) (* vx (- 1 (* Deltat mu_freq1))))
		 (set! (vrf a_rva g 4) (* vy (- 1 (* Deltat mu_freq1))))
		 (set! (vrf a_rva g 5) (* vz (- 1 (* Deltat mu_freq1))))
		 )
	       (PUT_SPARSE_MEMORY (+ ,particle_head (* __idx_all_base ,PARTICLE_LEN)) (vrf a_rva 0)  numcp ,PARTICLE_LEN 6)
	       )
	     )
	   )
	)
      (lambda () '())
      )
    (gen_push_kernel 'calculate_rho all_vars
      (lambda (particle_head)
	`(begin
	   ;(LOG_RECORD_OUT "load0=%d\n" load0)
	(if load0
	   (begin
	     ;,(gen_get_particle_data 0)
	     (define-double xx (vrf ,particle_head 0))
	     (define-double xy (vrf ,particle_head 1))
	     (define-double xz (vrf ,particle_head 2))
	     (declare-int (Bidx (floor xx)) (Bidy (floor xy)) (Bidz (floor xz)))
	     (INIT_ASYNC_IO_LOCK get_sync_id)
	     (INIT_ASYNC_IO_LOCK put_sync_id)
	     
	     (define Midx Bidx)
	     (define Midy Bidy)
	     (define Midz Bidz)
	     (set! Bidx (- Bidx 1))
	     (set! Bidy (- Bidy 1))
	     (set! Bidz (- Bidz 1))
	     (fffor-xyz-from-zero-to 1 4 4
	       (define-int total_idx (* 3 4 (+ xyzy (* xyzz 4))))
	       (parallel-get-memory (+ shJ total_idx) (+ FoutJ (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) 12 get_sync_id))
	     (for-from-zero-to-cache-opt ((,particle_head local_particle_head double 6 ,PARTICLE_LEN)) ,PAR_CACHE_LEN g load0
	       (begin
		 (define-double xx0 (vrf local_particle_head g 0))
		 (define-double xy0 (vrf local_particle_head g 1))
		 (define-double xz0 (vrf local_particle_head g 2))
		 (define-double rx0 (- xx0 Midx))
		 (define-double ry0 (- xy0 Midy))
		 (define-double rz0 (- xz0 Midz))
		 ,(if_isgpu
		    '()
		    `(if (not (and (<= rx0 1) (>= rx0 0) (<= ry0 1) (>= ry0 0) (<= rz0 1) (>= rz0 0))) (begin (LOG_RECORD_INFO "%e %e %e %e %e %e g=%d %d %d %d\n" xx0 xy0 xz0 (vrf local_particle_head g 3) (vrf local_particle_head g 4) (vrf local_particle_head g 5) g Midx Midy Midz) (exit 0))))
		 ,(begin-map
		    (lambda (xyz)
		      ;(set! xyz (number->string xyz))
		      (define arrname (multi-concat 'f_ xyz '_arr))
		      `(begin
			 (dec-local-array double ,arrname 4)
			 ,(begin-map
			    (lambda (i)
			      `(vector-set! ,arrname ,i ,(eval (list (multi-concat 'fl (number->string i)) (list 'quote (multi-concat 'r xyz "0")))))
			      )
			    '(0 1 2 3)
			    )
			 )
		      )
		    '(x y z))
		 (fffor-xyz-from-zero-to 4 4 4
		   (define-scalar-int total_idx (* 3 (+ xyzx (* 4 (+ xyzy (* xyzz 4))))))
		   (define-double coeff (* (vrf f_x_arr xyzx) (vrf f_y_arr xyzy) (vrf f_z_arr xyzz)))
		   (define-scalar-double rcoeff (reduce + coeff))
		   ;(LOG_RECORD_OUT "coeff=%e, chg=%e\n" coeff Charge )
		   (incf! (vrf shJ (+ total_idx 0)) (* rcoeff Charge ))
		   )) ()
	       )
	     (fffor-xyz-from-zero-to 1 4 4 
	       (define-int total_idx (* 3 4 (+ xyzy (* 4 xyzz)))) 
	       (PUT_CONT_MEMORY (+ FoutJ (GET_FIELD_ELEMENT_ID_KERNEL Bidx (+ xyzy Bidy) (+ xyzz Bidz) 0 0)) (+ shJ total_idx) 12 put_sync_id)
	       )
	     (WAIT_SPARSE_MEMORY put_sync_id)) 
	   ))
	)
      (lambda () 
	`(begin 
	   (dec-local_shared-array double shJ 192)
	   ))
      )
    (gen_push_kernel 'dump_ene_num all_vars
      (lambda (particle_head)
	(define RNUM_ELE 7)
	(define finout_EN_head `(+ FoutEN (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 0 0 (* NUM_SPEC ,RNUM_ELE)) (* SPEC ,RNUM_ELE)))
	`(if load0 
	   (begin
	     (define-int Midx (if use_local_particle_position (floor (vrf ,particle_head 0)) mdx))
	     (define-int Midy (if use_local_particle_position (floor (vrf ,particle_head 1)) mdy))
	     (define-int Midz (if use_local_particle_position (floor (vrf ,particle_head 2)) mdz))
	     ;(LOG_RECORD_INFO "%d %d %d %d\n" Midx Midy Midz load0)
	     (define lg 0)
	     (define allene0_x 0.0)
	     (define allene0_y 0.0)
	     (define allene0_z 0.0)
	     (define allavv_x 0.0)
	     (define allavv_y 0.0)
	     (define allavv_z 0.0)
	     (define-int allnumcp 0)
	     (for-from-to g 0 3
	       (vector-set! enevec (+ g (* 3 __idx)) 0)
	       (vector-set! avvvec (+ g (* 3 __idx)) 0))
	     (vector-set! numcpvec (* 1 __idx) 0)
	     (for 0 (< (+ (* __idx ,PAR_CACHE_LEN) lg) load0) (incf! lg (* __xlen ,PAR_CACHE_LEN))
	       (dec-local-array double a_rva ,PAR_CACHE_LEN 6)
	       (define-int __idx_all_base (+ (* __idx ,PAR_CACHE_LEN) lg))
	       (define-int numcp
		 ,(case RUNTIME
		    ('SWMC `(if (>= (+ __idx_all_base ,PAR_CACHE_LEN) load0) (- load0 __idx_all_base) ,PAR_CACHE_LEN))
		    (else 1)
		    )
		 )
	       (GET_SPARSE_MEMORY (vrf a_rva 0) (+ ,particle_head (* __idx_all_base ,PARTICLE_LEN)) numcp ,PARTICLE_LEN 6)
	       (define ene0_x 0.0)
	       (define ene0_y 0.0)
	       (define ene0_z 0.0)
	       (define aver_vx 0.0)
	       (define aver_vy 0.0)
	       (define aver_vz 0.0)
	       ;(define maxene0 0.0)
	       (for-from-to g 0 numcp
		 (define vx (vrf a_rva g 3))
		 (define vy (vrf a_rva g 4))
		 (define vz (vrf a_rva g 5))
		 ;(for-from-to i 0 6 (LOG_RECORD_OUT "%.15e " (vrf a_rva g i))) (LOG_RECORD_OUT "\n") (fflush stdout )
		 (define-double curene_x (* Mass 0.5 (+ (* vx vx))))
		 (define-double curene_y (* Mass 0.5 (+ (* vy vy))))
		 (define-double curene_z (* Mass 0.5 (+ (* vz vz))))
		 (incf! ene0_x curene_x)
		 (incf! ene0_y curene_y)
		 (incf! ene0_z curene_z)
		 (incf! aver_vx vx)
		 (incf! aver_vy vy)
		 (incf! aver_vz vz)
		 ;(incf! maxene0 (if (> maxene0 curene) 0 (- curene maxene0)))
		 )
	       (incf! (vector-ref enevec (* 3 __idx)) ene0_x)
	       (incf! (vector-ref enevec (+ (* 3 __idx) 1)) ene0_y)
	       (incf! (vector-ref enevec (+ (* 3 __idx) 2)) ene0_z)
	       (incf! (vector-ref avvvec (* 3 __idx)) aver_vx)
	       (incf! (vector-ref avvvec (+ (* 3 __idx) 1)) aver_vy)
	       (incf! (vector-ref avvvec (+ (* 3 __idx) 2)) aver_vz)
	       (incf! (vector-ref numcpvec __idx) numcp)
	       ;(vector-set! maxenevec __idx (if (> (vector-ref maxenevec __idx) maxene0) (vector-ref maxenevec __idx) maxene0))
	       )
	     (sync-local)
	     (if (== __idx 0) 
	       (begin
		 (for-from-to g 0 __xlen
		   (incf! allene0_x (vector-ref enevec (+ (* 3 g) 0)))
		   (incf! allene0_y (vector-ref enevec (+ (* 3 g) 1)))
		   (incf! allene0_z (vector-ref enevec (+ (* 3 g) 2)))
		   (incf! allavv_x (vector-ref avvvec (+ (* 3 g) 0)))
		   (incf! allavv_y (vector-ref avvvec (+ (* 3 g) 1)))
		   (incf! allavv_z (vector-ref avvvec (+ (* 3 g) 2)))
		   ;(incf! allmaxene0 (if (> allmaxene0 (vector-ref maxenevec g)) 0 (- (vector-ref maxenevec g) allmaxene0)))
		   (incf! allnumcp (vector-ref numcpvec g))
		   )
		 (incf! (vector-ref ,finout_EN_head 0) allene0_x)
		 (incf! (vector-ref ,finout_EN_head 1) allene0_y)
		 (incf! (vector-ref ,finout_EN_head 2) allene0_z)
		 (incf! (vector-ref ,finout_EN_head 3) allavv_x)
		 (incf! (vector-ref ,finout_EN_head 4) allavv_y)
		 (incf! (vector-ref ,finout_EN_head 5) allavv_z)
		 (incf! (vector-ref ,finout_EN_head 6) allnumcp)
		 ;(define-double foutentmp (vector-ref (+ FoutEN (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 0 0 (* NUM_SPEC 3))) (+ SPEC NUM_SPEC NUM_SPEC)))
		 ;(incf! (vector-ref (+ FoutEN (GET_FIELD_ELEMENT_ID_KERNEL Midx Midy Midz 0 0 (* NUM_SPEC 3))) (+ SPEC NUM_SPEC NUM_SPEC)) (if (> allmaxene0 foutentmp) (- allmaxene0 foutentmp) 0))
		 )
	       )
	     
	     )
	     )) 
      (lambda () 
	'(begin
	   (dec-local_shared-array double enevec IDX_OPT_MAX*3)
	   (dec-local_shared-array double avvvec IDX_OPT_MAX*3)
	   ;(dec-local_shared-array int maxenevec IDX_OPT_MAX*3)
	   (dec-local_shared-array int numcpvec IDX_OPT_MAX)
	   ))
      )
    )
    )) 
   

