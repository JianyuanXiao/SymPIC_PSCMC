
(input-include "local_header.h")
(input-scmc "../general_macros.scmc")
(input-scmc "../gen_discrete_operators.scmc")
(eval-scmc-global (begin (load "../kgmscheme.ss") '()))
(defmacro getxyz (glid)
  `(begin 
     (define-long xyzx (remainder ,glid xb))
     (define-long xyzy (remainder (/ ,glid xb) yb))
     (define-long xyzz (/ ,glid (* xb yb)))
     )
  )


(define-scmc-global gendec_core 
  (lambda (name dec_name offset01 level) ;1 0=3, -1 3=0
    ;(define o1 (if (= offset01 1) 3 0))
    ;(define o2 (if (= offset01 1) 0 3))
    ;(define o1 (if (= offset01 1) 'inoutE 'inoutB))
    ;(define o2 (if (= offset01 1) 'inoutB 'inoutE))
    (begin-map
      (lambda (nam-and-dis-dec-inner-proc)
	(multi-define name_lfx dis-curl-inner-proc nam-and-dis-dec-inner-proc)
	`(defkernel ,(multi-concat 'Yee_FDTD_ dec_name name name_lfx) ,yee-header-procs 
	   (define i 0)
	   ;(define-long rem (remainder numvec __ylen))
	   (define-long local_ynum (runc "(numvec-1)/y_cpu_core+1"))
	   (define-long local_ymin (* __idy local_ynum))
	   (define-long local_ymax (* (+ 1 __idy) local_ynum))
	   (define xb xblock)
	   (define yb yblock)
	   (define zb zblock)
	   (define-long blk_all_len (* xb yb zb num_ele))
	   (if (>= local_ymax numvec) (set! local_ymax numvec))
	   (for (set! i local_ymin) (< i local_ymax) i++
	     ;(define-double tmpOF (vector-ref (+ outField (* blk_all_len i)) 4))
	     ;(define-double tmpIF (vector-ref (+ inField (* blk_all_len i)) i))
	     (define j 0)
	     (fffor_xyz_from_zero_to 1 YLEN ZLEN
	       (define-long blk_offset_t1 (* blk_all_len i))
	       (define-long blk_offset (+ (* blk_all_len i) (GET_IDXYZL ovlp (+ xyzy ovlp) (+ xyzz ovlp) 0 num_ele xb yb zb)))
	       (block
		 (define g 0)
		 ,(cond 
		    ((or (eq? level 0) (eq? level 1))
		      `(for g=0 (< (+ __idx (* g __xlen)) (* XLEN 3)) g++
			 (define-long realidx (+ __idx (* g __xlen)))
			 (define l (remainder realidx 3))
			 (define xidx (/ realidx 3))
			 (set! realidx (+ (* (/ realidx 3) num_ele) l))
			 ,(append
			    '(cond)
			    (map
			      (lambda (l)
				`((== l ,l) (set! (vector-ref outEB (+ blk_offset realidx)) ,(dis-curl-inner-proc `(+ inEB blk_offset_t1) '(+ xidx ovlp) '(+ xyzy ovlp) '(+ xyzz ovlp) l (- offset01))))
				)
			      '(0 1 2)
			      )
			    '((else 0))
			    )
			 ))
		    (else
		      `(for g=0 (< (+ __idx (* g __xlen)) XLEN) g++
			 (define-long realidx (+ __idx (* g __xlen)))
			 (define xidx realidx)
			 (set! realidx (* realidx num_ele))
			 (set! (vector-ref outEB (+ blk_offset realidx)) ,(dis-curl-inner-proc `(+ inEB blk_offset_t1) '(+ xidx ovlp) '(+ xyzy ovlp) '(+ xyzz ovlp) 0 (- offset01)))
			 )
		      )
		    )
		 )
	       )
	     )
	   ))
      `(("" ,(gen-dis-dec level)) ("_4th" ,(gen-4th-dis-dec level)))
      )))
(defmacro gencurl_core_old (name offset01) ;1 0=3, -1 3=0
  ;(define o1 (if (= offset01 1) 3 0))
  ;(define o2 (if (= offset01 1) 0 3))
  ;(define o1 (if (= offset01 1) 'inoutE 'inoutB))
  ;(define o2 (if (= offset01 1) 'inoutB 'inoutE))
  (begin-map
    (lambda (nam-and-dis-curl-inner-proc)
      (multi-define name_lfx dis-curl-inner-proc nam-and-dis-curl-inner-proc)
      `(defkernel ,(multi-concat 'Yee_FDTD_Curl_ name name_lfx) ((double* outEB) (double* inEB) (long y_cpu_core) (long numvec) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long xblock) (long yblock) (long zblock) (int num_ele) (double DT))
	 (define i 0)
	 ;(define-long rem (remainder numvec __ylen))
	 (define-long local_ynum (runc "(numvec-1)/y_cpu_core+1"))
	 (define-long local_ymin (* __idy local_ynum))
	 (define-long local_ymax (* (+ 1 __idy) local_ynum))
	 (define xb xblock)
	 (define yb yblock)
	 (define zb zblock)
	 (define-long blk_all_len (* xb yb zb num_ele))
	 (if (>= local_ymax numvec) (set! local_ymax numvec))
	 (for (set! i local_ymin) (< i local_ymax) i++
	   ;(define-double tmpOF (vector-ref (+ outField (* blk_all_len i)) 4))
	   ;(define-double tmpIF (vector-ref (+ inField (* blk_all_len i)) i))
	   (define j 0)
	   (fffor_xyz_from_zero_to 1 YLEN ZLEN
	     (define-long blk_offset_t1 (* blk_all_len i))
	     (define-long blk_offset (+ (* blk_all_len i) (GET_IDXYZL ovlp (+ xyzy ovlp) (+ xyzz ovlp) 0 num_ele xb yb zb)))
	     (block
	       (define g 0)
	       (for g=0 (< (+ __idx (* g __xlen)) (* XLEN 3)) g++
		 (define-long realidx (+ __idx (* g __xlen)))
		 (define l (remainder realidx 3))
		 (define xidx (/ realidx 3))
		 (set! realidx (+ (* (/ realidx 3) num_ele) l))
		 ,(append
		    '(cond)
		    (map
		      (lambda (l)
			`((== l ,l) (-= (vector-ref outEB (+ blk_offset realidx)) (* DT ,(dis-curl-inner-proc `(+ inEB blk_offset_t1) '(+ xidx ovlp) '(+ xyzy ovlp) '(+ xyzz ovlp) l (- offset01)))))
			)
		      '(0 1 2)
		      )
		    '((else 0))
		    )
		 )
	       )
	     )
	   )
	 ))
    `(("" ,gen-dis-curl) ("_4th" ,gen-4th-dis-curl))
    ))
(gencurl_core_old E -1)
(gencurl_core_old B 1)
(eval-scmc-global 
  (begin-map
    (lambda (decname level)
      `(begin
	 ,(gendec_core 'BWD decname 1 level)
	 ,(gendec_core 'FWD decname -1 level))
      )
    '(Grad_ Curl_ Div_) '(0 1 2)
    )
  )
;(eval-scmc-global (gendec_core 'W04 "" 0 100))
(defkernel merge_current_2 ((double* outEB) (double* inEB) (long y_cpu_core) (long numvec) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long xblock) (long yblock) (long zblock) (int num_ele))
  (define-long local_ynum (runc "(numvec-1)/y_cpu_core+1"))
  (define-long local_ymin (* __idy local_ynum))
  (define-long local_ymax (* (+ 1 __idy) local_ynum))
  (if (>= local_ymax numvec) (set! local_ymax numvec))
  (define-long ori_num_ele (* num_ele pscmc_num_compute_units))
  (define-long blk_all_len (* xblock yblock zblock ori_num_ele))
  (define-long blk_len (* xblock yblock zblock))
  (for-from-to i local_ymin local_ymax
    (define-long lg 0)
    (if (== __idx 0)
      (for-from-to lg 0 blk_len
	(define-long g lg)
	(define-long xx (remainder g xblock))
	(define-long xy (remainder (/ g xblock) yblock))
	(define-long xz (/ g (* xblock yblock)))
	(define-long blk_offset (* blk_all_len i))
	(for-from-to ig 0 num_ele
	  (define-double lst_n0 0)
	  (define-long new_allid (GET_IDXYZL xx xy xz ig num_ele xblock yblock zblock))
	  (for-from-to il 0 pscmc_num_compute_units
	    ;(define-long local_all_id (+ il (* ig pscmc_num_compute_unit)))
	    (define-long ori_allid (+ new_allid (* il blk_len num_ele)))
	    (incf! lst_n0 (vector-ref inEB (+ ori_allid blk_offset)))
	    )
	  (vector-set! outEB (+ new_allid (* blk_len i num_ele)) lst_n0)
	  )
	)
      )
    )
  )
(defkernel merge_current ((double* outEB) (double* inEB) (long y_cpu_core) (long numvec) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long xblock) (long yblock) (long zblock) (int num_ele))
  (define-long local_ynum (runc "(numvec-1)/y_cpu_core+1"))
  (define-long local_ymin (* __idy local_ynum))
  (define-long local_ymax (* (+ 1 __idy) local_ynum))
  (if (>= local_ymax numvec) (set! local_ymax numvec))
  (define-long blk_all_len (* xblock yblock zblock 375))
  (define-long blk_len (* xblock yblock zblock))
  (for-from-to i local_ymin local_ymax 
    ;(define allmax (* XLEN YLEN ZLEN))
    (define-long lg 0)
    (if (== __idx 0)
      (for (set! lg 0) (< lg blk_len) (incf! lg 1)
	;(define-long g (+ lg __idx))
	(define-long g lg)
	(define-long xx (remainder g xblock))
	(define-long xy (remainder (/ g xblock) yblock))
	(define-long xz (/ g (* xblock yblock)))
	(define-long blk_offset (* blk_all_len i))
	(declare-double (jx 0) (jy 0) (jz 0))
	(fffor-xyz-from-zero-to 5 5 5 
	  (define-long local_all_id (+ xyzx (* 5 (+ xyzy (* 5 xyzz)))))
	  (define-long curx (+ (- 2 xyzx) xx))
	  (define-long cury (+ (- 2 xyzy) xy))
	  (define-long curz (+ (- 2 xyzz) xz))
	  ;(define-long global_all_id (+ xyzx (* 5 (+ xyzy (* 5 xyzz)))))
	  (define-long final_all_id (GET_IDXYZL curx cury curz local_all_id 375 xblock yblock zblock))
	  (if 
	    (and 
	      (>= curx ovlp) (< curx (- xblock ovlp))
	      (>= cury ovlp) (< cury (- yblock ovlp))
	      (>= curz ovlp) (< curz (- zblock ovlp))
	      )
	    (begin
	      ;(if (neq? (vector-ref (+ inEB blk_offset) (+ final_all_id 0)) 0) (LOG_RECORD_DEBUG "lfs=0x%lx cur=[%d %d %d],xyz=[%d %d %d],xxs=[%d %d %d] numvec=%d num_ele=%d __ylen=%d allidx=%d fref=%e\n" inEB curx cury curz xyzx xyzy xyzz xx xy xz numvec num_ele __ylen (+ blk_offset final_all_id) (vector-ref (+ inEB blk_offset) (+ final_all_id 0))))
	      (incf! jx (vector-ref (+ inEB blk_offset) (+ final_all_id 0  )))
	      (incf! jy (vector-ref (+ inEB blk_offset) (+ final_all_id 125)))
	      (incf! jz (vector-ref (+ inEB blk_offset) (+ final_all_id 250)))
	      )
	    )
	  )
	;(LOG_RECORD_DEBUG "i=%d g=%d\n" i g)
	(define-long offset_idx (* xblock yblock zblock 3 i))
	(set! (vector-ref outEB (+ offset_idx (* 3 g) 0)) jx)
	(set! (vector-ref outEB (+ offset_idx (* 3 g) 1)) jy)
	(set! (vector-ref outEB (+ offset_idx (* 3 g) 2)) jz)
	))
    )
  )
(eval-scmc-global 
  (begin
  (load "../multi-map.ss")
  (define (gen_core_funs name blockfun corefun . extra_para)
    (define ep (if (null? extra_para) '() (car extra_para)))
    (define fep (if (and (pair? extra_para) (pair? (cdr extra_para))) (cadr extra_para) '()))
    `(defkernel ,name ,(append `((double* outEB) (double* inEB)) fep `((int* xoffset) (int* yoffset) (int* zoffset) (long y_cpu_core) (long numvec) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long xblock) (long yblock) (long zblock) (int num_ele) (double DT) (double M) (double Q) (double DX)) ep)
       (define-long local_ynum (runc "(numvec-1)/y_cpu_core+1"))
       (define-long local_ymin (* __idy local_ynum))
       (define-long local_ymax (* (+ 1 __idy) local_ynum))
       (if (>= local_ymax numvec) (set! local_ymax numvec))
       (define-long blk_all_len (* xblock yblock zblock num_ele))
       (for-from-to i local_ymin local_ymax 
	 (define allmax (* XLEN YLEN ZLEN))
	 (define-long g 0)
	 ,(blockfun)
	 (for (set! g 0) (< g allmax) (incf! g)
	   (define-long xyzx (remainder g XLEN))
	   (define-long xyzy (remainder (/ g XLEN) YLEN))
	   (define-long xyzz (/ g (* XLEN YLEN)))
	   (define-long blk_offset (* blk_all_len i))
	   (if (eq? __idx 0)
	     ,(corefun))
	   )
	 )
       ))
  (begin
    `(begin
       ,(begin-map
	  (lambda (offs name)
	    (gen_core_funs name
	      (lambda () 
		`(begin
		   ;(define-int cur_x (+ xyzx (vector-ref xoffset i)))
		   ;(define-int cur_y (+ xyzy (vector-ref yoffset i)))
		   ;(define-int cur_z (+ xyzz (vector-ref zoffset i)))
		   (define xoffi (vector-ref xoffset i))
		   (define yoffi (vector-ref yoffset i))
		   (define zoffi (vector-ref zoffset i))
		   (define-int x_use_abc (remainder abc_dir 2))
		   (define-int y_use_abc (remainder (/ abc_dir 2) 2))
		   (define-int z_use_abc (remainder (/ abc_dir 4) 2))
		   ;(fprintf stderr "[%d %d %d] [%d %d %d] dt=%e\n" xoffi yoffi zoffi allxmax allymax allzmax DT)
		   )
		)
	      (lambda ()
		(define (genxyz_sigma xyz)
		  (define curxyz (concat 'cur_ xyz))
		  (define allxyzmax (multi-concat 'all xyz 'max))
		  `(if (and ,(concat xyz '_use_abc) (or (< ,curxyz level) (>= ,curxyz (- ,allxyzmax level)))) 
		     (begin
		       (define-double ocs (/ (* 1.0 (if (< ,curxyz level) (- (- level 1) ,curxyz) (- ,curxyz (- ,allxyzmax level)))) level))
		       (set! ,(concat 'sigma_E xyz) (* max_sigma (pow ocs (* 1.0 pml_m))))
		       ;(fprintf stderr ,(multi-concat "" xyz "sgm=%e curx=%d\n" ) ,(concat 'sigma_E xyz) ,curxyz)
		       ;(set! ,(concat 'sigma_B xyz) (* max_sigma (pow ocs pml_m)))
		       (set! use_pml_calc 1)
		       (if (== ,curxyz 0) (set! inner_pec 1))
		       )
		     )
		  )
		(define (getField vname l offsetxyz offsetnum)
		  (define xvec (list->vector '(xyzx xyzy xyzz)))
		  (vector-set! xvec offsetxyz `(+ ,(vector-ref xvec (remainder offsetxyz 3)) ,offsetnum))
		  `(vector-ref (+ ,vname (* blk_all_len i)) (GET_IDXYZLO ,(vector-ref xvec 0) ,(vector-ref xvec 1) ,(vector-ref xvec 2) ,l num_ele xblock yblock zblock))
		  )
		(define (getDiffField vname l offsetxyz offsetnum)
		  `(- ,(getField vname l offsetxyz offsetnum) ,(getField vname l offsetxyz 0))
		  )
		(define (getsgmE l)
		  (concat 'sigma_E (case l (0 'x) (1 'y) (2 'z)))
		  )
		(define (getdx l)
		  (concat 'D (case l (0 'X) (1 'Y) (2 'Z)))
		  )
		`(begin
		   (define use_pml_calc 0)
		   (define inner_pec 0)
		   (define sigma_Ex 0.0)
		   (define sigma_Ey 0.0)
		   (define sigma_Ez 0.0)
		   (define cur_x (+ xoffi xyzx))
		   (define cur_y (+ yoffi xyzy))
		   (define cur_z (+ zoffi xyzz))
		   ;(fprintf stderr ,(multi-concat "" name "cur_xyz=[%d %d %d]\n") cur_x cur_y cur_z)
		   (define xb xblock)
		   (define yb yblock)
		   (define zb zblock)
		   ,(begin-map genxyz_sigma '(x y z))
		   (if use_pml_calc 
		     ,(begin-map
			(lambda (l)
			  (begin-map
			    (lambda (l2)
			      (define lp1p2 (remainder (+ l l2) 3))
			      (define lC (remainder (+ l l2 l2) 3))
			      (define optfield (if (eq? l2 1) 'outEB 'outPMLEB))
			      `(begin 
				 (if inner_pec
				   (begin
				     (set! ,(getField optfield l lp1p2 0) 0)
				     )
				 (block
				   (define-double sgmB ,(getsgmE lp1p2))
				   (define-double expsgmBt (exp (- (* DT sgmB))))
				   (define-double mesgbosgbdb (if (eq? sgmB 0) (/ DT ,(getdx lp1p2)) (/ (- 1 expsgmBt) (* sgmB ,(getdx lp1p2)))))
				   (define-double dceb_A ,(getDiffField 'inEB lC lp1p2 offs))
				   (define-double dceb_B ,(getDiffField 'inPMLEB lC lp1p2 offs))
				   ;(fprintf stderr "%e %e %e %e %e\n" dceb_A dceb_B mesgbosgbdb sgmB ,(getdx lp1p2))
				   (set! ,(getField optfield l lp1p2 0) (* 1.0 (+ (* expsgmBt ,(getField optfield l lp1p2 0)) (* ,(if (eq? l2 1) 1 -1) -1 mesgbosgbdb (+ dceb_A dceb_B)))))
				   )))
			      )
			    '(1 2)
			    )
			  )
			'(0 1 2)
			)
		     (begin
		       ,(begin-map 
			 (lambda (l)
			   `(begin
			      ;(fprintf stderr "|%e %e 0x%lx 0x%lx " ,(getField 'inEB l 0 0) ,(getField 'outEB l 0 0) ("&" ,(getField 'inEB l 0 0)) ("&" ,(getField 'outEB l 0 0)))
			      (-= ,(getField 'outEB l 0 0) (* DT (+ ,(gen-dis-curl '(+ inEB (* i blk_all_len)) `(+ xyzx ovlp) `(+ xyzy ovlp) `(+ xyzz ovlp) l offs) ,(gen-dis-curl '(+ inPMLEB (* i blk_all_len)) `(+ xyzx ovlp) `(+ xyzy ovlp) `(+ xyzz ovlp) l offs))))
			      ;(fprintf stderr "%e |" ,(getField 'outEB l 0 0))
			      
			      )
			   )
			 '(0 1 2))
		       ;(fprintf stderr "\n")
		       )
		     )
		   )
		)
	      '((double DY) (double DZ) (int abc_dir) (int level) (int pml_m) (double max_sigma) (long allxmax) (long allymax) (long allzmax)) '((double* outPMLEB) (double* inPMLEB))))
	  '(1 -1) '(PML_FDTD_CURL_FWD PML_FDTD_CURL_BWD)
	  )
       ,(gen_core_funs 'kgm_calc_rho 
	  (lambda () '())
	  (lambda ()
	    ;(define-double q 0.3)
	    `(begin 
	       (define-double rho 0)
	       (block
		 (define num_ele 10)
		 (define-double p0r (vector-ref (+ inEB (* 10 blk_offset)) (GET_IDXYZLO xyzx xyzy xyzz 8 10 xblock yblock zblock)))
		 (define-double p0i (vector-ref (+ inEB (* 10 blk_offset)) (GET_IDXYZLO xyzx xyzy xyzz 9 10 xblock yblock zblock)))
		 (define-double p1r (vector-ref (+ inEB (* 10 blk_offset)) (GET_IDXYZLO xyzx xyzy xyzz 3 10 xblock yblock zblock)))
		 (define-double p1i (vector-ref (+ inEB (* 10 blk_offset)) (GET_IDXYZLO xyzx xyzy xyzz 4 10 xblock yblock zblock)))
		 ;(define-double cjp1r p0r*p1r+p0i*p1i)
		 (define-double cjp1i p0i*p1r-p0r*p1i)
		 (set! rho (/ (* 2 cjp1i q) dtodx))
		 ;(fprintf stderr "%e %e %d blk=%d id=%d xyzz=%d numele=%d\n" cjp1i rho mode blk_offset (GET_IDXYZLO xyzx xyzy xyzz 0 1 xblock yblock zblock) xyzz num_ele)
		 (dec-array double curr 3)
		 (vector-set! curr 0 (+ xyzx (vrf xoffset i)))
		 (vector-set! curr 1 (+ xyzy (vrf yoffset i)))
		 (vector-set! curr 2 (+ xyzz (vrf zoffset i)))
		 (cond
		   ((and (> mode 0) (< mode 4))
		     (set! rho (* rho (vector-ref curr (- mode 1))))
		     )
		   ((and (> mode 3) (< mode 6))
		     (set! rho (* rho (pow (vector-ref curr (- mode 4)) 2)))
		     )
		   (else 0)
		   ))
	       (vector-set! (+ outEB blk_offset) (GET_IDXYZLO xyzx xyzy xyzz 0 1 xblock yblock zblock) rho))
	       
	    )
	  '((double refz0) (double q) (double dtodx) (int mode) (int swap_input))
	  )
       ,(gen_core_funs 'kgm_eqn_core
	  (lambda () '())
	  (lambda ()
	    `(begin 
	       (begin . ;here i j k are z y x
		 ,(multi-map 
		    (lambda ijk
		      (multi-define i j k ijk)
		      (define the-lst (map (lambda (x) (number->string x)) ijk))
		      (define (gen_cursym ch t xyz) 
			(apply multi-concat (lcons ch t (append the-lst xyz))))
		      `(begin
			 ,(begin-map
			    (lambda (xyz) 
			      `(begin 
				 (define-double ,(gen_cursym 'veA "0" `(,(concat '_ (number->string xyz)))) 
				   (vector-ref (+ extA0 (/ (* blk_offset 3) num_ele)) (GET_IDXYZLO2 (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) (+ ,xyz -1 0) 3 xblock yblock zblock))
				   )
				 (define-double ,(gen_cursym 'veA "1" `(,(concat '_ (number->string xyz))))
				   (vector-ref (+ extA1 (/ (* blk_offset 3) num_ele)) (GET_IDXYZLO2 (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) (+ ,xyz -1 0) 3 xblock yblock zblock))
				   )
				 (define-double ,(gen_cursym 'vA "0" `(,(concat '_ (number->string xyz)))) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) (+ ,xyz -1 5) num_ele xblock yblock zblock)))
				 (define-double ,(gen_cursym 'vA "1" `(,(concat '_ (number->string xyz)))) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) (+ ,xyz -1 0) num_ele xblock yblock zblock)))
				 )
			      ) '(1 2 3)
			    )
			 (define-double ,(gen_cursym 'PHI1_R "0" `()) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) 8 num_ele xblock yblock zblock)))
			 (define-double ,(gen_cursym 'PHI1_I "0" `()) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) 9 num_ele xblock yblock zblock)))
			 (define-double ,(gen_cursym 'PHI1_R "1" `()) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) 3 num_ele xblock yblock zblock)))
			 (define-double ,(gen_cursym 'PHI1_I "1" `()) (vector-ref (+ inEB blk_offset) (GET_IDXYZLO (+ ,k xyzx -1) (+ ,j xyzy -1) (+ ,i xyzz -1) 4 num_ele xblock yblock zblock)))
			 )
		      ) 
		    '(0 1 2) '(0 1 2) '(0 1 2)
		    )
		 )
	       (define-double REFZ0 (+ xyzz rfz0 (vrf zoffset i)))
	       ;(if (< g_beg REFZ0) (set! GEXT 0))
	       ,(let ((oe -1))
		  (begin-map
		    (lambda (nm)
		      (set! oe (+ oe 1))
		      (define funs (eval `(,(concat 'fl (number->string oe)) 0)))
		      `(begin
			 (vector-set! (+ outEB blk_offset) (GET_IDXYZLO xyzx xyzy xyzz (+ ,oe 5) num_ele xblock yblock zblock) ,nm)
			 (vector-set! (+ outEB blk_offset) (GET_IDXYZLO xyzx xyzy xyzz (+ ,oe 0) num_ele xblock yblock zblock) ,funs)
			 ;(vector-set! (+ outEB blk_offset) (GET_IDXYZLO xyzx xyzy xyzz (+ ,oe 0) num_ele xblock yblock zblock) REFZ0)
			 )
		      ) '(vA1111_1 vA1111_2 vA1111_3 PHI1_R1111 PHI1_I1111)
		    ))
	       )
	    ) '((double GEXT) (double rfz0) (double g_beg) (int swap_input)) '((double* extA0) (double* extA1))
	  ))
    ))
  )
