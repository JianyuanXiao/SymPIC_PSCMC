
(input-include "local_header.h")
(input-scmc "../general_macros.scmc")
(input-scmc "../gen_discrete_operators.scmc")

(defmacro getxyz (glid)
  `(begin 
     (define-long xyzx (remainder ,glid xb))
     (define-long xyzy (remainder (/ ,glid xb) yb))
     (define-long xyzz (/ ,glid (* xb yb)))
     )
  )
(define-scmc-global get-num-xyz (lambda (xyzlr)
  (case xyzlr
    	('xr 0)
	('xl 0)
	('yl 1)
	('yr 1)
	('zl 2)
	('zr 2)
	(else "Error in get_num_xyz")
))
)
(eval-scmc-global 
  (begin 
    (define xyzvec (vector 'X 'Y 'Z))
    (define (get-xyz-coeffs xyzl_r)
      (map 
	(lambda (x)
	  (define ori-idx (vector 'xyzx 'xyzy 'xyzz))
	  (define xyznum (get-num-xyz x))
	  (define lr (if (eq? (cadr (string->list (symbol->string x))) #\l) #t #f))
	  (vector-set! ori-idx xyznum (if lr 1 `(- ,(concat (vector-ref xyzvec xyznum) 'LEN) 2)))
	  (vector->list ori-idx)
	  ) xyzl_r)
      )
    (define gen-add-xyz-edges-no-tr 
      (lambda (xyzlr_l l) 
	(define min1_xyzlr (get-xyz-coeffs xyzlr_l))
	(define num_dim (length xyzlr_l))
	(define num_geo (/ 1. (sqrt num_dim)))
	(define zpf (* 1 num_geo))
	(define coe0 'deltat)
	(define coe1 zpf)
	(define __idx0 `(xyzx xyzy xyzz))
	`(block
	   (define tmpval 0.0)
	   (define-long realidx0 (GET_IDXYZL . ,(append (map (lambda (x) `(+ ,x ovlp)) __idx0) `(l num_ele xb yb zb))))
	   ,(begin-map
	     (lambda (x)
	       (define __idx1 x)
	       `(block
		  (define-long realidx1 (GET_IDXYZL . ,(append (map (lambda (x) `(+ ,x ovlp)) __idx1) `(l num_ele xb yb zb))))
		  (incf! tmpval (* ,coe1 (- (vector-ref inEB (+ blk_offset realidx1)) (vector-ref inEB (+ blk_offset realidx0)))))
		  )
	       )
	     min1_xyzlr
	     )
	   (set! (vector-ref outEB (+ blk_offset realidx0)) (+ (* deltat tmpval) (vector-ref inEB (+ blk_offset realidx0))))
	   )

	))
    '()
    ))

(defmacro FFFOR-FROM-TO-GPU-IDX (xmin ymin zmin xmax ymax zmax . body)
  `(block
    (define inner_g_static 0)
    (define inner_xrange (- ,xmax ,xmin))
    (define inner_yrange (- ,ymax ,ymin))
    (define inner_zrange (- ,zmax ,zmin))
    (define inner_allmax (* inner_xrange inner_yrange inner_zrange))
    (for 0 (< (+ inner_g_static __idx) inner_allmax) (incf! inner_g_static __xlen)
      
	(begin
	  ;(getxyz (+ inner_g_static __idx))
	  (getxyz_blks (+ inner_g_static __idx) inner_xrange inner_yrange inner_zrange)
	  (define xyzx bxyzx)
	  (define xyzy bxyzy)
	  (define xyzz bxyzz)
	  (incf! xyzx ,xmin)
	  (incf! xyzy ,ymin)
	  (incf! xyzz ,zmin)
	  . ,body
	  )
      )
    )
  )
(define-scmc-global gen-outter-matrix-if-levels 
  (lambda (i current-level)
    (define mins (vector 0 0 0))
    (define maxes (vector 'XLEN 'YLEN 'ZLEN))
    ;(write current-level current-error-port) (newline current-error-port)
    (map 
      (lambda (x)
	(define xyznum (get-num-xyz x))
	(define lr (if (eq? (cadr (string->list (symbol->string x))) #\l) #t #f))
	(if lr (vector-set! maxes xyznum 1) (vector-set! mins xyznum `(- ,(concat (vector-ref xyzvec xyznum) 'LEN) 1)))
	) 
      current-level)
    `(FFFOR-FROM-TO-GPU-IDX . 
       ,(append (vector->list mins) (vector->list maxes) 
	  `(
	     (for-from-to l 0 3
	       ,(gen-add-xyz-edges-no-tr current-level i)
	       )
	     )
	  )
       )
    )
  )
(define-scmc-global gen-outter-matrix-shell 
  (lambda (abcdirs i current-level)
    (cond 
      ((and (null? abcdirs) (null? current-level)) '())
      ((null? abcdirs) '())
      (else
	(define fstar (car abcdirs))
	(define new-left-current-level (append current-level (list (concat (car abcdirs) 'l))))
	(define new-right-current-level (append current-level (list (concat  (car abcdirs) 'r))))
	`(begin 
	   ,(gen-outter-matrix-shell (cdr abcdirs) i current-level)
	   (if (b-and ,(concat 'cur_rank_ fstar) 1) 
	     (begin
	       ,(gen-outter-matrix-if-levels i new-left-current-level)
	       ,(gen-outter-matrix-shell (cdr abcdirs) i new-left-current-level)
	       )
	     )
	   (if (b-and (shift-r ,(concat 'cur_rank_ fstar) 1) 1)
	     (begin
	       ,(gen-outter-matrix-if-levels i new-right-current-level)
	       ,(gen-outter-matrix-shell (cdr abcdirs) i new-right-current-level)
	       )
	     )
	   )
	)
      ))
  )
(define-scmc-global gen-gen-outter-matrix-shell 
  (lambda (numele core-command)
    (named-lambda self (abcdirs i current-level)
      (define (local-gen-if-levels i current-level)
	(define mins (vector 0 0 0))
	(define maxes (vector 'XLEN 'YLEN 'ZLEN))
	(define __idx0 `(xyzx xyzy xyzz))
	;(write current-level current-error-port) (newline current-error-port)
	(map 
	  (lambda (x)
	    (define xyznum (get-num-xyz x))
	    (define lr (if (eq? (cadr (string->list (symbol->string x))) #\l) #t #f))
	    (if lr (vector-set! maxes xyznum 1) (vector-set! mins xyznum `(- ,(concat (vector-ref xyzvec xyznum) 'LEN) 1)))
	    ) 
	  current-level)
	`(FFFOR-FROM-TO-GPU-IDX . 
	   ,(append (vector->list mins) (vector->list maxes) 
	      `(
		 (for-from-to l 0 ,numele
		   (block
		     (define-long realidx0 (GET_IDXYZL . ,(append (map (lambda (x) `(+ ,x ovlp)) __idx0) `(l num_ele xb yb zb))))
		     (set! (vector-ref outEB (+ blk_offset realidx0)) ,core-command)
		     )
		   )
		 )
	      )
	   )
	)
      (cond 
	((and (null? abcdirs) (null? current-level)) '())
	((null? abcdirs) '())
	(else
	  (define fstar (car abcdirs))
	  (define new-left-current-level (append current-level (list (concat (car abcdirs) 'l))))
	  (define new-right-current-level (append current-level (list (concat  (car abcdirs) 'r))))
	  `(begin 
	     ,(self (cdr abcdirs) i current-level)
	     (if (b-and ,(concat 'cur_rank_ fstar) 1) 
	       (begin
		 ,(local-gen-if-levels i new-left-current-level)
		 ,(self (cdr abcdirs) i new-left-current-level)
		 )
	       )
	     (if (b-and (shift-r ,(concat 'cur_rank_ fstar) 1) 1)
	       (begin
		 ,(local-gen-if-levels i new-right-current-level)
		 ,(self (cdr abcdirs) i new-right-current-level)
		 )
	       )
	     )
	  )
	))
    )
  )
(define-scmc-global gen-outter-matrix-shell-setfix 
  (gen-gen-outter-matrix-shell 'num_ele 
    '(set! (vector-ref outEB (+ blk_offset realidx0)) (vector-ref inEB (+ blk_offset realidx0)))
    ))
(define-scmc-global gen-outter-matrix-shell-pec
  (named-lambda self (abcdirs i current-level)
    (define (local-gen-if-levels i current-level)
      (define mins (vector 0 0 0))
      (define maxes (vector 'XLEN 'YLEN 'ZLEN))
      (define __idx0 `(xyzx xyzy xyzz))
      ;(write current-level current-error-port) (newline current-error-port)
      (map 
	(lambda (x)
	  (define xyznum (get-num-xyz x))
	  (define lr (if (eq? (cadr (string->list (symbol->string x))) #\l) #t #f))
	  (if lr (vector-set! maxes xyznum 1) (vector-set! mins xyznum `(- ,(concat (vector-ref xyzvec xyznum) 'LEN) 1)))
	  ) 
	current-level)
      `(FFFOR-FROM-TO-GPU-IDX . 
	 ,(append (vector->list mins) (vector->list maxes) 
	    `(
	       (for-from-to l 0 num_ele
		 (block
		   (define-long realidx0 (GET_IDXYZL . ,(append (map (lambda (x) `(+ ,x ovlp)) __idx0) `(l num_ele xb yb zb))))
		   (set! (vector-ref outEB (+ blk_offset realidx0)) 0)
		   )
		 )
	       )
	    )
	 )
      )
    (cond 
      ((and (null? abcdirs) (null? current-level)) '())
      ((null? abcdirs) '())
      (else
	(define fstar (car abcdirs))
	(define new-left-current-level (append current-level (list (concat (car abcdirs) 'l))))
	(define new-right-current-level (append current-level (list (concat  (car abcdirs) 'r))))
	`(begin 
	   ,(self (cdr abcdirs) i current-level)
	   (if (b-and ,(concat 'cur_rank_ fstar) 1) 
	     (begin
	       ,(local-gen-if-levels i new-left-current-level)
	       ,(self (cdr abcdirs) i new-left-current-level)
	       )
	     )
	   (if (b-and (shift-r ,(concat 'cur_rank_ fstar) 1) 1)
	     (begin
	       ,(local-gen-if-levels i new-right-current-level)
	       ,(self (cdr abcdirs) i new-right-current-level)
	       )
	     )
	   )
	)
      ))
  )

(define-scmc-global gen-outter-matrix-shell-damp
  (named-lambda self (abcdirs i current-level)
    (define (local-gen-if-levels i current-level)
      (define mins (vector 0 0 0))
      (define maxes (vector 'XLEN 'YLEN 'ZLEN))
      (define __idx0 `(xyzx xyzy xyzz))
      ;(write current-level current-error-port) (newline current-error-port)
      (map 
	(lambda (x)
	  (define xyznum (get-num-xyz x))
	  (define lr (if (eq? (cadr (string->list (symbol->string x))) #\l) #t #f))
	  (if lr (vector-set! maxes xyznum 1) (vector-set! mins xyznum `(- ,(concat (vector-ref xyzvec xyznum) 'LEN) 1)))
	  ) 
	current-level)
      `(FFFOR-FROM-TO-GPU-IDX . 
	 ,(append (vector->list mins) (vector->list maxes) 
	    `(
	       (for-from-to l 0 3
		 (block
		   (define-long realidx0 (GET_IDXYZL . ,(append (map (lambda (x) `(+ ,x ovlp)) __idx0) `(l num_ele xb yb zb))))
		   (set! (vector-ref outEB (+ blk_offset realidx0)) (* damp_vars (vector-ref outEB (+ blk_offset realidx0))))
		   )
		 )
	       )
	    )
	 )
      )
    (cond 
      ((and (null? abcdirs) (null? current-level)) '())
      ((null? abcdirs) '())
      (else
	(define fstar (car abcdirs))
	(define new-left-current-level (append current-level (list (concat (car abcdirs) 'l))))
	(define new-right-current-level (append current-level (list (concat  (car abcdirs) 'r))))
	`(begin 
	   ,(self (cdr abcdirs) i current-level)
	   (if (b-and ,(concat 'cur_rank_ fstar) 1) 
	     (begin
	       ,(local-gen-if-levels i new-left-current-level)
	       ,(self (cdr abcdirs) i new-left-current-level)
	       )
	     )
	   (if (b-and (shift-r ,(concat 'cur_rank_ fstar) 1) 1)
	     (begin
	       ,(local-gen-if-levels i new-right-current-level)
	       ,(self (cdr abcdirs) i new-right-current-level)
	       )
	     )
	   )
	)
      ))
  )
(define-scmc-global abc_pec_vars '((double* outEB) (double* inEB) (int* cur_rankx) (int* cur_ranky) (int* cur_rankz) (long y_cpu_core) (long numvec) (long XLEN) (long YLEN) (long ZLEN) (int ovlp) (long xblock) (long yblock) (long zblock) (int num_ele) (double damp_vars) (double deltat)))

(define-scmc-global gen_mpi_yee_fdtd_zabc 
  (lambda (prefix_ abcfun fun_no_tr_name abcdirs i)
    `(begin
       (defkernel ,(multi-concat prefix_ fun_no_tr_name) ,abc_pec_vars  ; cur_rank[xyz] == 1 -> is the leftmost block, cur_rank[xyz] == 2 -> is the rightmost block, cur_rank[xyz] == 3 -> is both the leftmost and rightmost block.
	 (define xb xblock)
	 (define yb yblock)
	 (define zb zblock)
	 (define-long blk_all_len (* xb yb zb num_ele))
	 (define-long blk_offset (* __idy blk_all_len))
	 (define-int cur_rank_x (vector-ref cur_rankx __idy))
	 (define-int cur_rank_y (vector-ref cur_ranky __idy))
	 (define-int cur_rank_z (vector-ref cur_rankz __idy))
	 ;(LOG_RECORD_INFO "0x%lx %d %d %d %d\n" cur_rankx cur_rank_x cur_rank_y cur_rank_z __idy)
	 ;(exit 0)
	 ,(abcfun abcdirs 0 '())
	 )
       )
    )
  )
(eval-scmc-global 
  (begin
    (load "../multi-map.ss")
    `(begin .
       ,(multi-map  
	  (lambda (pfx abcdirs)
	    (multi-define pfx_ fun pfx)
	    (define fun_no_tr_name (if (null? abcdirs) "" (apply multi-concat abcdirs)))
	    (gen_mpi_yee_fdtd_zabc pfx_ fun fun_no_tr_name abcdirs 0))
      `((yee_abc_ ,gen-outter-matrix-shell) (yee_pec_ ,gen-outter-matrix-shell-pec) (yee_damp_ ,gen-outter-matrix-shell-damp) (yee_setfix_ , gen-outter-matrix-shell-setfix)) '(() (x) (y) (z) (x y) (x z) (y z) (x y z))) 
      )))
