;paravec.scmc general_macros.scmc

(eval-scmc-global (begin (load "pscmc_config_runtime.ss") '()))
(include< "stdio.h")
(include< "math.h")
(include< "stdlib.h")
(include< "stdint.h")
(include< "string.h")
(include< "assert.h")
;(include- "c_/c_pscmc_inc.h")
(input-scmc "paravec.scmc")
(input-scmc "general_macros.scmc")
(include- "cfgcst.h")

(input-all-pscmc-struct)
(input-all-kernel-and-rt)
(include- "space_filling_curve.h")

(defun init_complexity_tid int ((unsigned-long num_proc) (unsigned-long num_thread) (size_t* ori_vec) (long* num_thread_array) (int64_t* local_tid_array) (int* cd_performances) (int num_cds_per_mpi_proc))
  (define-long* cplx_array (TYPE_MALLOC long num_thread))
  (define-long* cplx_ori_array (TYPE_MALLOC long num_thread))
  (define total_complexity 0.0)
  (define-char* cmplx_file_name "COMPLEXITY_ARRAY")
  (define-FILE* fp (fopen cmplx_file_name "r"))
  (define total_perf 0)
  (inner-for-from-to k 0 num_cds_per_mpi_proc
    (if (not (vrf cd_performances k)) (set! (vrf cd_performances k) 1))
    (incf! total_perf (vector-ref cd_performances k))
    )
  (if fp 
    (begin 
      (LOG_RECORD_INFO "found %s for input\n" cmplx_file_name)
      (fread cplx_ori_array (sizeof int64_t ) num_thread fp)
      (fclose fp)
      ))
      
    (for-from-to i 0 num_thread
      (vector-set! cplx_array i (if fp (vector-ref cplx_ori_array (vector-ref ori_vec i)) (floor (call_CAL_FUN_ONE_PARA "get_thread_complexity" (vector-ref ori_vec i)))))
      (assert (>= (vector-ref cplx_array i) 0))
      (incf! total_complexity (vector-ref cplx_array i))
      )
  (assert total_complexity)
  ;(set! total_complexity (* total_complexity (/ (- num_thread 1e-4) num_thread)))
  (define global_cplx 0)
  (define current_pid 0)
  (define l_tid 0)
  (vector-set! num_thread_array 0 0)
  (for-from-to i 0 num_thread
    (define-long mpi_id (/ current_pid num_cds_per_mpi_proc))
    (define-long dev_id (remainder current_pid num_cds_per_mpi_proc))
    (define-long current_perf_all (* mpi_id total_perf))
    (for-from-to j 0 dev_id
      (incf! current_perf_all (vrf cd_performances j))
      )
    (if (>= (* global_cplx (/ num_proc num_cds_per_mpi_proc) total_perf) (* current_perf_all total_complexity))
      ;(> (/ global_cplx total_complexity) (/ (* current_pid 1.0) num_proc))
      ;(> (/ global_cplx total_complexity) (/ (* current_perf_all 1.0) (* total_perf (/ num_proc num_cds_per_mpi_proc))))
      (begin 
	(if (< current_pid num_proc)
	  (vector-set! num_thread_array current_pid i))
	;(LOG_RECORD_INFO "n_t_a[%d]=%d\n" current_pid i)
	(if (< current_pid num_proc)
	  (begin (incf! current_pid) (set! l_tid -1))
	  )
	)
      )
    (incf! global_cplx (vector-ref cplx_array i))
    ;(LOG_RECORD_INFO "i=%d global_cplx=%e cur_pid=%d tcpx=%e\n" i global_cplx current_pid total_complexity)
    (incf! l_tid)
    (vector-set! local_tid_array i l_tid)
    ;(LOG_RECORD_INFO "lta[%d]=%d\n" i l_tid)
    )
  ;(LOG_RECORD_INFO "cur_pid=%d, num_proc=%d\n" current_pid num_proc)
  (assert (== current_pid num_proc))
  (free cplx_array)
  (free cplx_ori_array)
  (return 0)
  )

(defun init_uniform_tid int ((unsigned-long num_proc) (unsigned-long num_thread) (long* num_thread_array) (long* local_tid_array) (int* cd_performances) (int num_cds_per_mpi_proc))
  (define-unsigned-long num_mpi_proc (/ num_proc num_cds_per_mpi_proc))
  (define i 0)
  (define global_tid 0)
  (define-long oneprocnum (/ num_thread num_mpi_proc))
  (define-long plusone (remainder num_thread num_mpi_proc))
  (define total_perf 0)
  (inner-for-from-to k 0 num_cds_per_mpi_proc
    (incf! total_perf (vector-ref cd_performances k))
    )
  (for i=0 (< i num_mpi_proc) i++
    (define tid_min global_tid)
    (define tid_plus (+ global_tid oneprocnum))
    (if (< i plusone) (incf! tid_plus))
    (define num_t_one_mpi_proc (- tid_plus tid_min))

    (inner-for-from-to k 0 num_cds_per_mpi_proc
      (vector-set! num_thread_array (+ k (* i num_cds_per_mpi_proc)) global_tid)
      (define old_pid global_tid)
      (define-double cur_proc_num_threads_f (/ (* 1.0 (vector-ref cd_performances k) num_t_one_mpi_proc) total_perf))
      (define-long cur_proc_num_threads (floor (+ cur_proc_num_threads_f (+ (- 1 (/ 1.0 num_cds_per_mpi_proc)) 1e-2))))
      (if (== k (- num_cds_per_mpi_proc 1)) 
	(set! global_tid (+ tid_min num_t_one_mpi_proc))
	(set! global_tid (+ global_tid cur_proc_num_threads))
	)
      (if (> global_tid num_thread) (set! global_tid num_thread))
      (if (> global_tid (+ num_t_one_mpi_proc tid_min)) (set! global_tid (+ num_t_one_mpi_proc tid_min)))
      (for-from-to j old_pid global_tid 
	(vector-set! local_tid_array j (- j old_pid))
	)
      ;(LOG_RECORD_INFO "%d k=%d %d %d\n" num_t_one_mpi_proc k global_tid num_cds_per_mpi_proc)
      )
    )
  (return 0)
  )
(defun get_cur_tid long ((long pid) (long num_thread) (long num_proc) (long* num_thread_array))
  (return  (vector-ref num_thread_array pid))
  )
(defun get_cur_num_tid long ((long pid) (long num_thread) (long num_proc) (long* num_thread_array))
  (define ret 0)
  (assert (< pid num_proc))
  ;(for-from-to i 0 4 (LOG_RECORD_INFO "nta[%d]=%d\n" i (vector-ref num_thread_array i)))
  ;(LOG_RECORD_INFO "pid=%d tntid=0x%x ntid=%d\n" pid num_thread_array (vector-ref num_thread_array pid))
  (set! ret  (cond
    ((< pid (- num_proc 1)) (- (vector-ref num_thread_array (+ pid 1)) (vector-ref num_thread_array pid)))
    (else
      (- num_thread (vector-ref num_thread_array pid))
      )
    ))
  ;(LOG_RECORD_INFO "ret=%d\n" ret)
  (return ret)
  )
(defun find_the_proc_id long ((long tid) (unsigned-long num_proc) (long* num_thread_array))
  ;(LOG_RECORD_INFO "%d %d\n" tid num_proc)
  (cond
    ((<= num_proc 1) (return 0))
    ((< tid (vector-ref num_thread_array (/ num_proc 2)))
      (return (find_the_proc_id tid (/ num_proc 2) num_thread_array))
      )
    (else
      (return (+ (/ num_proc 2) (find_the_proc_id tid (- num_proc (/ num_proc 2)) (+ num_thread_array (/ num_proc 2)))))
      )
    )
  )
(eval-scmc-global
  `(defun-class-Field3D_Seq init_adjoint_relations int ((long n) (long ndim) (long adj_type) (long num_proc) (long* ovvec) (long* ori_vec) (long* num_thread_array) (long* local_tid_array))
     ;(assert (< global_pid num_proc))
     (define onen (shift-l 1 n))
     (define alllen 1)
     (assert ndim<4)
     (for-from-to g 0 ndim
       (set! alllen (* alllen onen))
       )
     (define i 0)
     ;(LOG_RECORD_OUT "numvec=%d\n" numvec)
     ;(for i=0 i<onen*onen i++ (LOG_RECORD_OUT "%d\n" (vector-ref ovvec i)))
     ;(block (getxyz_blks (vector-ref ovvec global_pid) x_num_thread_block y_num_thread_block z_num_thread_block) (LOG_RECORD_OUT "rank=%d realpos=[%d,%d,%d]\n" global_pid bxyzx bxyzy bxyzz))
     
     (for i=0 (< i numvec) (set! i (+ i 1))
       (define cur_thread (vector-ref ori_vec (+ (vector-ref num_thread_array global_pid) i)))
       ;(LOG_RECORD_INFO "cur_thread=%d gpid=%d nt[gpid]=%d numvec=%d\n" cur_thread global_pid (vector-ref num_thread_array global_pid) numvec)
       (getxyz_blks cur_thread x_num_thread_block y_num_thread_block z_num_thread_block)
       ;(LOG_RECORD_INFO "xyz_num_tb=[%d %d %d], cur_t=%d\n" x_num_thread_block y_num_thread_block z_num_thread_block cur_thread)
       (vector-set! global_x_offset i (* xlen bxyzx))
       (vector-set! global_y_offset i (* ylen bxyzy))
       (vector-set! global_z_offset i (* zlen bxyzz))
       ,(begin-map
	  (lambda (x)
	    `(block
	       (define-int* tmpv (choose_the_runtime (pscmc_get_h_data ,(multi-concat 'cur_rank x '_pscmc) NULL)))
	       (vector-set! tmpv i (+ (* 2 (== ,(multi-concat 'bxyz x) (- ,(multi-concat x '_num_thread_block) 1))) (== ,(multi-concat 'bxyz x) 0)))
	       (set! tmpv (choose_the_runtime (pscmc_get_h_data ,(multi-concat x 'offset) NULL)))
	       (vector-set! tmpv i (vector-ref ,(multi-concat 'global_ x '_offset) i))
	       ;(LOG_RECORD_INFO ,(multi-concat "%d %d " x "\n") (vector-ref tmpv i) i)
	       )
	    )
	  '(x y z)
	  ) 
       (choose_the_runtime (pscmc_mem_sync_h2d cur_rankx_pscmc))
       (choose_the_runtime (pscmc_mem_sync_h2d cur_ranky_pscmc))
       (choose_the_runtime (pscmc_mem_sync_h2d cur_rankz_pscmc))
       (choose_the_runtime (pscmc_mem_sync_h2d xoffset))
       (choose_the_runtime (pscmc_mem_sync_h2d yoffset))
       (choose_the_runtime (pscmc_mem_sync_h2d zoffset))
       (vector-set! global_id i cur_thread)
       (fffor_xyz_from_zero_to 3 3 3
	 (define-int xyzlocalall (GET_IDXYZL xyzx xyzy xyzz 0 1 3 3 3))
	 ;(LOG_RECORD_OUT "%d %d %d\n" bxyzx bxyzy bxyzz)
	 (define-long adj_id_pre (GET_IDXYZ_PERIOD (+ bxyzx (- xyzx 1)) (+ bxyzy (- xyzy 1)) (+ bxyzz (- xyzz 1)) x_num_thread_block y_num_thread_block z_num_thread_block))
	 (define cur_adj_id (vector-ref ovvec adj_id_pre))
	 (vector-set! adj_ids (+ (* i NUM_SYNC_LAYER) xyzlocalall) cur_adj_id)
	 (define cur_adj_pid (find_the_proc_id cur_adj_id num_proc num_thread_array))
	 (vector-set! adj_processes (+ (* i NUM_SYNC_LAYER) xyzlocalall) cur_adj_pid)
	 (vector-set! adj_local_tid (+ (* i NUM_SYNC_LAYER) xyzlocalall) (vector-ref local_tid_array cur_adj_id))
	 ;(LOG_RECORD_OUT "curthread=%d %d %d %d %d %d %d adjid=%d cur_adj_id=%d cur_adj_pid=%d\n" cur_thread (+ bxyzx (- xyzx 1)) (+ bxyzy (- xyzy 1)) (+ bxyzz (- xyzz 1)) xyzx xyzy xyzz adj_id_pre cur_adj_id cur_adj_pid)
	 )
       )
     (return 0)
     ))


